
Project_Wiznet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000019c  20000070  08002b9c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000020c  08002b9c  0002020c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009ee5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000191e  00000000  00000000  00029f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000039a0  00000000  00000000  0002b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000740  00000000  00000000  0002f248  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006f0  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000168ea  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005b3e  00000000  00000000  00046962  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008af02  00000000  00000000  0004c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000d73a2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001510  00000000  00000000  000d7420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080028d4 	.word	0x080028d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080028d4 	.word	0x080028d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b510      	push	{r4, lr}
 80005a2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
 80005a6:	7818      	ldrb	r0, [r3, #0]
 80005a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <HAL_InitTick+0x44>)
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f89a 	bl	80006f0 <HAL_SYSTICK_Config>
 80005bc:	b968      	cbnz	r0, 80005da <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	2c0f      	cmp	r4, #15
 80005c0:	d901      	bls.n	80005c6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005c2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80005c4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c6:	2200      	movs	r2, #0
 80005c8:	4621      	mov	r1, r4
 80005ca:	f04f 30ff 	mov.w	r0, #4294967295
 80005ce:	f000 f85d 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_InitTick+0x40>)
 80005d4:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 80005d6:	2000      	movs	r0, #0
 80005d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80005da:	2001      	movs	r0, #1
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000008 	.word	0x20000008

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 fc1e 	bl	8001e50 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	6811      	ldr	r1, [r2, #0]
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_IncTick+0x14>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000009c 	.word	0x2000009c
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000009c 	.word	0x2000009c

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
 8000648:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800064e:	d002      	beq.n	8000656 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_Delay+0x24>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000674:	0200      	lsls	r0, r0, #8
 8000676:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800067c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000680:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000684:	60d0      	str	r0, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_NVIC_SetPriority+0x5c>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c3 0407 	rsb	r4, r3, #7
 800069a:	2c04      	cmp	r4, #4
 800069c:	bf28      	it	cs
 800069e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	1d1d      	adds	r5, r3, #4
 80006a2:	2d06      	cmp	r5, #6
 80006a4:	d917      	bls.n	80006d6 <HAL_NVIC_SetPriority+0x4a>
 80006a6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	2501      	movs	r5, #1
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4021      	ands	r1, r4
 80006b2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b4:	fa05 f303 	lsl.w	r3, r5, r3
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80006be:	2800      	cmp	r0, #0
 80006c0:	db0b      	blt.n	80006da <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	0109      	lsls	r1, r1, #4
 80006c4:	b2c9      	uxtb	r1, r1
 80006c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006ca:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006ce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006d2:	bc30      	pop	{r4, r5}
 80006d4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2300      	movs	r3, #0
 80006d8:	e7e6      	b.n	80006a8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	f000 000f 	and.w	r0, r0, #15
 80006de:	0109      	lsls	r1, r1, #4
 80006e0:	b2c9      	uxtb	r1, r1
 80006e2:	4b02      	ldr	r3, [pc, #8]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
 80006e4:	5419      	strb	r1, [r3, r0]
 80006e6:	e7f4      	b.n	80006d2 <HAL_NVIC_SetPriority+0x46>
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	e000ed14 	.word	0xe000ed14

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	3801      	subs	r0, #1
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d20a      	bcs.n	800070e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_SYSTICK_Config+0x24>)
 80006fa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	21f0      	movs	r1, #240	; 0xf0
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_SYSTICK_Config+0x28>)
 8000700:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	2000      	movs	r0, #0
 8000706:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800071c:	2300      	movs	r3, #0
 800071e:	2b0f      	cmp	r3, #15
 8000720:	f200 80cd 	bhi.w	80008be <HAL_GPIO_Init+0x1a2>
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	e095      	b.n	8000856 <HAL_GPIO_Init+0x13a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800072a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800072c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000730:	2703      	movs	r7, #3
 8000732:	fa07 f70e 	lsl.w	r7, r7, lr
 8000736:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073a:	68ce      	ldr	r6, [r1, #12]
 800073c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000740:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000742:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000744:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000746:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074a:	684d      	ldr	r5, [r1, #4]
 800074c:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8000750:	409d      	lsls	r5, r3
 8000752:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000754:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000756:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000758:	005f      	lsls	r7, r3, #1
 800075a:	2203      	movs	r2, #3
 800075c:	40ba      	lsls	r2, r7
 800075e:	43d2      	mvns	r2, r2
 8000760:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000762:	688d      	ldr	r5, [r1, #8]
 8000764:	40bd      	lsls	r5, r7
 8000766:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8000768:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076a:	684d      	ldr	r5, [r1, #4]
 800076c:	2d02      	cmp	r5, #2
 800076e:	f000 8084 	beq.w	800087a <HAL_GPIO_Init+0x15e>
 8000772:	2d12      	cmp	r5, #18
 8000774:	f000 8081 	beq.w	800087a <HAL_GPIO_Init+0x15e>
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000778:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800077a:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077c:	684d      	ldr	r5, [r1, #4]
 800077e:	f005 0503 	and.w	r5, r5, #3
 8000782:	40bd      	lsls	r5, r7
 8000784:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8000786:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000788:	684a      	ldr	r2, [r1, #4]
 800078a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800078e:	d05f      	beq.n	8000850 <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000790:	2200      	movs	r2, #0
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	4a4a      	ldr	r2, [pc, #296]	; (80008c0 <HAL_GPIO_Init+0x1a4>)
 8000796:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8000798:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800079c:	6455      	str	r5, [r2, #68]	; 0x44
 800079e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007a8:	089d      	lsrs	r5, r3, #2
 80007aa:	1cae      	adds	r6, r5, #2
 80007ac:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <HAL_GPIO_Init+0x1a8>)
 80007ae:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b2:	f003 0603 	and.w	r6, r3, #3
 80007b6:	00b6      	lsls	r6, r6, #2
 80007b8:	270f      	movs	r7, #15
 80007ba:	40b7      	lsls	r7, r6
 80007bc:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c0:	4f41      	ldr	r7, [pc, #260]	; (80008c8 <HAL_GPIO_Init+0x1ac>)
 80007c2:	42b8      	cmp	r0, r7
 80007c4:	d071      	beq.n	80008aa <HAL_GPIO_Init+0x18e>
 80007c6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007ca:	42b8      	cmp	r0, r7
 80007cc:	d06f      	beq.n	80008ae <HAL_GPIO_Init+0x192>
 80007ce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007d2:	42b8      	cmp	r0, r7
 80007d4:	d06d      	beq.n	80008b2 <HAL_GPIO_Init+0x196>
 80007d6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007da:	42b8      	cmp	r0, r7
 80007dc:	d06b      	beq.n	80008b6 <HAL_GPIO_Init+0x19a>
 80007de:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007e2:	42b8      	cmp	r0, r7
 80007e4:	d05f      	beq.n	80008a6 <HAL_GPIO_Init+0x18a>
 80007e6:	2707      	movs	r7, #7
 80007e8:	fa07 f606 	lsl.w	r6, r7, r6
 80007ec:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ee:	3502      	adds	r5, #2
 80007f0:	4e34      	ldr	r6, [pc, #208]	; (80008c4 <HAL_GPIO_Init+0x1a8>)
 80007f2:	f846 2025 	str.w	r2, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007f6:	4a35      	ldr	r2, [pc, #212]	; (80008cc <HAL_GPIO_Init+0x1b0>)
 80007f8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007fa:	43e2      	mvns	r2, r4
 80007fc:	ea05 0602 	and.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000800:	684f      	ldr	r7, [r1, #4]
 8000802:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000806:	d001      	beq.n	800080c <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 8000808:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->IMR = temp;
 800080c:	4d2f      	ldr	r5, [pc, #188]	; (80008cc <HAL_GPIO_Init+0x1b0>)
 800080e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000810:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000812:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	684f      	ldr	r7, [r1, #4]
 8000818:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800081c:	d001      	beq.n	8000822 <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 800081e:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->EMR = temp;
 8000822:	4d2a      	ldr	r5, [pc, #168]	; (80008cc <HAL_GPIO_Init+0x1b0>)
 8000824:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000826:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000828:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800082c:	684f      	ldr	r7, [r1, #4]
 800082e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000832:	d001      	beq.n	8000838 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8000834:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->RTSR = temp;
 8000838:	4d24      	ldr	r5, [pc, #144]	; (80008cc <HAL_GPIO_Init+0x1b0>)
 800083a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800083c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800083e:	402a      	ands	r2, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000840:	684e      	ldr	r6, [r1, #4]
 8000842:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000846:	d001      	beq.n	800084c <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 8000848:	ea44 0205 	orr.w	r2, r4, r5
        }
        EXTI->FTSR = temp;
 800084c:	4c1f      	ldr	r4, [pc, #124]	; (80008cc <HAL_GPIO_Init+0x1b0>)
 800084e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000850:	3301      	adds	r3, #1
 8000852:	2b0f      	cmp	r3, #15
 8000854:	d831      	bhi.n	80008ba <HAL_GPIO_Init+0x19e>
    ioposition = 0x01U << position;
 8000856:	2201      	movs	r2, #1
 8000858:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085a:	680c      	ldr	r4, [r1, #0]
 800085c:	4014      	ands	r4, r2
    if(iocurrent == ioposition)
 800085e:	42a2      	cmp	r2, r4
 8000860:	d1f6      	bne.n	8000850 <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	684d      	ldr	r5, [r1, #4]
 8000864:	1e6e      	subs	r6, r5, #1
 8000866:	2e01      	cmp	r6, #1
 8000868:	f67f af5f 	bls.w	800072a <HAL_GPIO_Init+0xe>
 800086c:	2d11      	cmp	r5, #17
 800086e:	f43f af5c 	beq.w	800072a <HAL_GPIO_Init+0xe>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	2d12      	cmp	r5, #18
 8000874:	f47f af6f 	bne.w	8000756 <HAL_GPIO_Init+0x3a>
 8000878:	e757      	b.n	800072a <HAL_GPIO_Init+0xe>
        temp = GPIOx->AFR[position >> 3U];
 800087a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800087e:	f10e 0e08 	add.w	lr, lr, #8
 8000882:	f850 502e 	ldr.w	r5, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000886:	f003 0c07 	and.w	ip, r3, #7
 800088a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800088e:	260f      	movs	r6, #15
 8000890:	fa06 f60c 	lsl.w	r6, r6, ip
 8000894:	ea25 0506 	bic.w	r5, r5, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000898:	690e      	ldr	r6, [r1, #16]
 800089a:	fa06 f60c 	lsl.w	r6, r6, ip
 800089e:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80008a0:	f840 502e 	str.w	r5, [r0, lr, lsl #2]
 80008a4:	e768      	b.n	8000778 <HAL_GPIO_Init+0x5c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	2704      	movs	r7, #4
 80008a8:	e79e      	b.n	80007e8 <HAL_GPIO_Init+0xcc>
 80008aa:	2700      	movs	r7, #0
 80008ac:	e79c      	b.n	80007e8 <HAL_GPIO_Init+0xcc>
 80008ae:	2701      	movs	r7, #1
 80008b0:	e79a      	b.n	80007e8 <HAL_GPIO_Init+0xcc>
 80008b2:	2702      	movs	r7, #2
 80008b4:	e798      	b.n	80007e8 <HAL_GPIO_Init+0xcc>
 80008b6:	2703      	movs	r7, #3
 80008b8:	e796      	b.n	80007e8 <HAL_GPIO_Init+0xcc>
      }
    }
  }
}
 80008ba:	b003      	add	sp, #12
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40013c00 	.word	0x40013c00

080008d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008d0:	6903      	ldr	r3, [r0, #16]
 80008d2:	4219      	tst	r1, r3
 80008d4:	d101      	bne.n	80008da <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008d6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80008d8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80008da:	2001      	movs	r0, #1
 80008dc:	4770      	bx	lr

080008de <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008de:	b912      	cbnz	r2, 80008e6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008e0:	0409      	lsls	r1, r1, #16
 80008e2:	6181      	str	r1, [r0, #24]
 80008e4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80008e6:	6181      	str	r1, [r0, #24]
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008ec:	2800      	cmp	r0, #0
 80008ee:	f000 81e4 	beq.w	8000cba <HAL_RCC_OscConfig+0x3ce>
{
 80008f2:	b570      	push	{r4, r5, r6, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	f013 0f01 	tst.w	r3, #1
 80008fe:	d03b      	beq.n	8000978 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000900:	4ba7      	ldr	r3, [pc, #668]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 030c 	and.w	r3, r3, #12
 8000908:	2b04      	cmp	r3, #4
 800090a:	d02c      	beq.n	8000966 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800090c:	4ba4      	ldr	r3, [pc, #656]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000914:	2b08      	cmp	r3, #8
 8000916:	d021      	beq.n	800095c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800091e:	d04f      	beq.n	80009c0 <HAL_RCC_OscConfig+0xd4>
 8000920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000924:	d052      	beq.n	80009cc <HAL_RCC_OscConfig+0xe0>
 8000926:	4b9e      	ldr	r3, [pc, #632]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000936:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d050      	beq.n	80009e0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093e:	f7ff fe79 	bl	8000634 <HAL_GetTick>
 8000942:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000944:	4b96      	ldr	r3, [pc, #600]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800094c:	d114      	bne.n	8000978 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094e:	f7ff fe71 	bl	8000634 <HAL_GetTick>
 8000952:	1b40      	subs	r0, r0, r5
 8000954:	2864      	cmp	r0, #100	; 0x64
 8000956:	d9f5      	bls.n	8000944 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000958:	2003      	movs	r0, #3
 800095a:	e1b3      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800095c:	4b90      	ldr	r3, [pc, #576]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000964:	d0d8      	beq.n	8000918 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000966:	4b8e      	ldr	r3, [pc, #568]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800096e:	d003      	beq.n	8000978 <HAL_RCC_OscConfig+0x8c>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 81a3 	beq.w	8000cbe <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	f013 0f02 	tst.w	r3, #2
 800097e:	d055      	beq.n	8000a2c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000980:	4b87      	ldr	r3, [pc, #540]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f013 0f0c 	tst.w	r3, #12
 8000988:	d03e      	beq.n	8000a08 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800098a:	4b85      	ldr	r3, [pc, #532]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000992:	2b08      	cmp	r3, #8
 8000994:	d033      	beq.n	80009fe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000996:	68e3      	ldr	r3, [r4, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d068      	beq.n	8000a6e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800099c:	2201      	movs	r2, #1
 800099e:	4b81      	ldr	r3, [pc, #516]	; (8000ba4 <HAL_RCC_OscConfig+0x2b8>)
 80009a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009a2:	f7ff fe47 	bl	8000634 <HAL_GetTick>
 80009a6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a8:	4b7d      	ldr	r3, [pc, #500]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f013 0f02 	tst.w	r3, #2
 80009b0:	d154      	bne.n	8000a5c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b2:	f7ff fe3f 	bl	8000634 <HAL_GetTick>
 80009b6:	1b40      	subs	r0, r0, r5
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f5      	bls.n	80009a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80009bc:	2003      	movs	r0, #3
 80009be:	e181      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c0:	4a77      	ldr	r2, [pc, #476]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 80009c2:	6813      	ldr	r3, [r2, #0]
 80009c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e7b5      	b.n	8000938 <HAL_RCC_OscConfig+0x4c>
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	e7ab      	b.n	8000938 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80009e0:	f7ff fe28 	bl	8000634 <HAL_GetTick>
 80009e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e6:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009ee:	d0c3      	beq.n	8000978 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f0:	f7ff fe20 	bl	8000634 <HAL_GetTick>
 80009f4:	1b40      	subs	r0, r0, r5
 80009f6:	2864      	cmp	r0, #100	; 0x64
 80009f8:	d9f5      	bls.n	80009e6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80009fa:	2003      	movs	r0, #3
 80009fc:	e162      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009fe:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a06:	d1c6      	bne.n	8000996 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a08:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f013 0f02 	tst.w	r3, #2
 8000a10:	d004      	beq.n	8000a1c <HAL_RCC_OscConfig+0x130>
 8000a12:	68e3      	ldr	r3, [r4, #12]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d001      	beq.n	8000a1c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
 8000a1a:	e153      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1c:	4a60      	ldr	r2, [pc, #384]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a24:	6921      	ldr	r1, [r4, #16]
 8000a26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a2a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	f013 0f08 	tst.w	r3, #8
 8000a32:	d040      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a34:	6963      	ldr	r3, [r4, #20]
 8000a36:	b363      	cbz	r3, 8000a92 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <HAL_RCC_OscConfig+0x2bc>)
 8000a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a3e:	f7ff fdf9 	bl	8000634 <HAL_GetTick>
 8000a42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a44:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a48:	f013 0f02 	tst.w	r3, #2
 8000a4c:	d133      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4e:	f7ff fdf1 	bl	8000634 <HAL_GetTick>
 8000a52:	1b40      	subs	r0, r0, r5
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9f5      	bls.n	8000a44 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000a58:	2003      	movs	r0, #3
 8000a5a:	e133      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a5c:	4a50      	ldr	r2, [pc, #320]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a64:	6921      	ldr	r1, [r4, #16]
 8000a66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e7de      	b.n	8000a2c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <HAL_RCC_OscConfig+0x2b8>)
 8000a72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a74:	f7ff fdde 	bl	8000634 <HAL_GetTick>
 8000a78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f013 0f02 	tst.w	r3, #2
 8000a82:	d0d3      	beq.n	8000a2c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a84:	f7ff fdd6 	bl	8000634 <HAL_GetTick>
 8000a88:	1b40      	subs	r0, r0, r5
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	d9f5      	bls.n	8000a7a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000a8e:	2003      	movs	r0, #3
 8000a90:	e118      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a92:	2200      	movs	r2, #0
 8000a94:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <HAL_RCC_OscConfig+0x2bc>)
 8000a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a98:	f7ff fdcc 	bl	8000634 <HAL_GetTick>
 8000a9c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aa2:	f013 0f02 	tst.w	r3, #2
 8000aa6:	d006      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fdc4 	bl	8000634 <HAL_GetTick>
 8000aac:	1b40      	subs	r0, r0, r5
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9f5      	bls.n	8000a9e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	e106      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	f013 0f04 	tst.w	r3, #4
 8000abc:	d079      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ac6:	d133      	bne.n	8000b30 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ae0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae2:	4b32      	ldr	r3, [pc, #200]	; (8000bac <HAL_RCC_OscConfig+0x2c0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aea:	d023      	beq.n	8000b34 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aec:	68a3      	ldr	r3, [r4, #8]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d034      	beq.n	8000b5c <HAL_RCC_OscConfig+0x270>
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	d038      	beq.n	8000b68 <HAL_RCC_OscConfig+0x27c>
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	671a      	str	r2, [r3, #112]	; 0x70
 8000b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b02:	f022 0204 	bic.w	r2, r2, #4
 8000b06:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b08:	68a3      	ldr	r3, [r4, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d036      	beq.n	8000b7c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fd91 	bl	8000634 <HAL_GetTick>
 8000b12:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b18:	f013 0f02 	tst.w	r3, #2
 8000b1c:	d148      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fd89 	bl	8000634 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d9f3      	bls.n	8000b14 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e0c9      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8000b30:	2500      	movs	r5, #0
 8000b32:	e7d6      	b.n	8000ae2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_RCC_OscConfig+0x2c0>)
 8000b36:	6813      	ldr	r3, [r2, #0]
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fd79 	bl	8000634 <HAL_GetTick>
 8000b42:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_RCC_OscConfig+0x2c0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b4c:	d1ce      	bne.n	8000aec <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b4e:	f7ff fd71 	bl	8000634 <HAL_GetTick>
 8000b52:	1b80      	subs	r0, r0, r6
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f5      	bls.n	8000b44 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000b58:	2003      	movs	r0, #3
 8000b5a:	e0b3      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b5c:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000b5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6713      	str	r3, [r2, #112]	; 0x70
 8000b66:	e7cf      	b.n	8000b08 <HAL_RCC_OscConfig+0x21c>
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b6c:	f042 0204 	orr.w	r2, r2, #4
 8000b70:	671a      	str	r2, [r3, #112]	; 0x70
 8000b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b74:	f042 0201 	orr.w	r2, r2, #1
 8000b78:	671a      	str	r2, [r3, #112]	; 0x70
 8000b7a:	e7c5      	b.n	8000b08 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7c:	f7ff fd5a 	bl	8000634 <HAL_GetTick>
 8000b80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_RCC_OscConfig+0x2b4>)
 8000b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b86:	f013 0f02 	tst.w	r3, #2
 8000b8a:	d011      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fd52 	bl	8000634 <HAL_GetTick>
 8000b90:	1b80      	subs	r0, r0, r6
 8000b92:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d9f3      	bls.n	8000b82 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	e092      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	42470000 	.word	0x42470000
 8000ba8:	42470e80 	.word	0x42470e80
 8000bac:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000bb0:	b9ed      	cbnz	r5, 8000bee <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bb2:	69a3      	ldr	r3, [r4, #24]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8084 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bba:	4a45      	ldr	r2, [pc, #276]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000bbc:	6892      	ldr	r2, [r2, #8]
 8000bbe:	f002 020c 	and.w	r2, r2, #12
 8000bc2:	2a08      	cmp	r2, #8
 8000bc4:	d051      	beq.n	8000c6a <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d017      	beq.n	8000bfa <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_RCC_OscConfig+0x3e8>)
 8000bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fd30 	bl	8000634 <HAL_GetTick>
 8000bd4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bd6:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bde:	d042      	beq.n	8000c66 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be0:	f7ff fd28 	bl	8000634 <HAL_GetTick>
 8000be4:	1b00      	subs	r0, r0, r4
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f5      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000bea:	2003      	movs	r0, #3
 8000bec:	e06a      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000bf0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	e7db      	b.n	8000bb2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_RCC_OscConfig+0x3e8>)
 8000bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c00:	f7ff fd18 	bl	8000634 <HAL_GetTick>
 8000c04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c0e:	d006      	beq.n	8000c1e <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c10:	f7ff fd10 	bl	8000634 <HAL_GetTick>
 8000c14:	1b40      	subs	r0, r0, r5
 8000c16:	2802      	cmp	r0, #2
 8000c18:	d9f5      	bls.n	8000c06 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	e052      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c1e:	69e3      	ldr	r3, [r4, #28]
 8000c20:	6a22      	ldr	r2, [r4, #32]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c26:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c2c:	0852      	lsrs	r2, r2, #1
 8000c2e:	3a01      	subs	r2, #1
 8000c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c3a:	4a25      	ldr	r2, [pc, #148]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000c3c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_RCC_OscConfig+0x3e8>)
 8000c42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fcf6 	bl	8000634 <HAL_GetTick>
 8000c48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c52:	d106      	bne.n	8000c62 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c54:	f7ff fcee 	bl	8000634 <HAL_GetTick>
 8000c58:	1b00      	subs	r0, r0, r4
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d9f5      	bls.n	8000c4a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8000c5e:	2003      	movs	r0, #3
 8000c60:	e030      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
 8000c64:	e02e      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
 8000c66:	2000      	movs	r0, #0
 8000c68:	e02c      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d02c      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->CFGR;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_RCC_OscConfig+0x3e4>)
 8000c70:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c72:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8000c76:	69e2      	ldr	r2, [r4, #28]
 8000c78:	4291      	cmp	r1, r2
 8000c7a:	d001      	beq.n	8000c80 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e021      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000c84:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c86:	428a      	cmp	r2, r1
 8000c88:	d001      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	e01a      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c90:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000c94:	401a      	ands	r2, r3
 8000c96:	428a      	cmp	r2, r1
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	e012      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ca2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d001      	beq.n	8000cac <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000cac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d00a      	beq.n	8000ccc <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e004      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4770      	bx	lr
        return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8000cc2:	2000      	movs	r0, #0
}
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
 8000cca:	e7fb      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e7f9      	b.n	8000cc4 <HAL_RCC_OscConfig+0x3d8>
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	42470060 	.word	0x42470060

08000cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d059      	beq.n	8000d9a <HAL_RCC_GetSysClockFreq+0xc2>
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cea:	482e      	ldr	r0, [pc, #184]	; (8000da4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cfc:	d02a      	beq.n	8000d54 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d06:	461e      	mov	r6, r3
 8000d08:	2700      	movs	r7, #0
 8000d0a:	015c      	lsls	r4, r3, #5
 8000d0c:	2500      	movs	r5, #0
 8000d0e:	1ae4      	subs	r4, r4, r3
 8000d10:	eb65 0507 	sbc.w	r5, r5, r7
 8000d14:	01a9      	lsls	r1, r5, #6
 8000d16:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d1a:	01a0      	lsls	r0, r4, #6
 8000d1c:	1b00      	subs	r0, r0, r4
 8000d1e:	eb61 0105 	sbc.w	r1, r1, r5
 8000d22:	00cb      	lsls	r3, r1, #3
 8000d24:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d28:	00c4      	lsls	r4, r0, #3
 8000d2a:	19a0      	adds	r0, r4, r6
 8000d2c:	eb43 0107 	adc.w	r1, r3, r7
 8000d30:	024b      	lsls	r3, r1, #9
 8000d32:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000d36:	0244      	lsls	r4, r0, #9
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f7ff faa7 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d4e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d5c:	461e      	mov	r6, r3
 8000d5e:	2700      	movs	r7, #0
 8000d60:	015c      	lsls	r4, r3, #5
 8000d62:	2500      	movs	r5, #0
 8000d64:	1ae4      	subs	r4, r4, r3
 8000d66:	eb65 0507 	sbc.w	r5, r5, r7
 8000d6a:	01a9      	lsls	r1, r5, #6
 8000d6c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d70:	01a0      	lsls	r0, r4, #6
 8000d72:	1b00      	subs	r0, r0, r4
 8000d74:	eb61 0105 	sbc.w	r1, r1, r5
 8000d78:	00cb      	lsls	r3, r1, #3
 8000d7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d7e:	00c4      	lsls	r4, r0, #3
 8000d80:	19a0      	adds	r0, r4, r6
 8000d82:	eb43 0107 	adc.w	r1, r3, r7
 8000d86:	028b      	lsls	r3, r1, #10
 8000d88:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d8c:	0284      	lsls	r4, r0, #10
 8000d8e:	4620      	mov	r0, r4
 8000d90:	4619      	mov	r1, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	f7ff fa7c 	bl	8000290 <__aeabi_uldivmod>
 8000d98:	e7d3      	b.n	8000d42 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	00f42400 	.word	0x00f42400
 8000da8:	007a1200 	.word	0x007a1200

08000dac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000dac:	2800      	cmp	r0, #0
 8000dae:	f000 809e 	beq.w	8000eee <HAL_RCC_ClockConfig+0x142>
{
 8000db2:	b570      	push	{r4, r5, r6, lr}
 8000db4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000db6:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_RCC_ClockConfig+0x14c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d209      	bcs.n	8000dd6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc2:	b2cb      	uxtb	r3, r1
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <HAL_RCC_ClockConfig+0x14c>)
 8000dc6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc8:	6813      	ldr	r3, [r2, #0]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	f013 0f02 	tst.w	r3, #2
 8000ddc:	d017      	beq.n	8000e0e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dde:	f013 0f04 	tst.w	r3, #4
 8000de2:	d004      	beq.n	8000dee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000de4:	4a45      	ldr	r2, [pc, #276]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f013 0f08 	tst.w	r3, #8
 8000df4:	d004      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000df6:	4a41      	ldr	r2, [pc, #260]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000df8:	6893      	ldr	r3, [r2, #8]
 8000dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000dfe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e00:	4a3e      	ldr	r2, [pc, #248]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e02:	6893      	ldr	r3, [r2, #8]
 8000e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e08:	68a0      	ldr	r0, [r4, #8]
 8000e0a:	4303      	orrs	r3, r0
 8000e0c:	6093      	str	r3, [r2, #8]
 8000e0e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	f013 0f01 	tst.w	r3, #1
 8000e16:	d032      	beq.n	8000e7e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d021      	beq.n	8000e62 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e1e:	1e9a      	subs	r2, r3, #2
 8000e20:	2a01      	cmp	r2, #1
 8000e22:	d925      	bls.n	8000e70 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4a35      	ldr	r2, [pc, #212]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	f012 0f02 	tst.w	r2, #2
 8000e2c:	d061      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e2e:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e30:	688a      	ldr	r2, [r1, #8]
 8000e32:	f022 0203 	bic.w	r2, r2, #3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000e3a:	f7ff fbfb 	bl	8000634 <HAL_GetTick>
 8000e3e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	6862      	ldr	r2, [r4, #4]
 8000e4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e4e:	d016      	beq.n	8000e7e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fbf0 	bl	8000634 <HAL_GetTick>
 8000e54:	1b80      	subs	r0, r0, r6
 8000e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d9f0      	bls.n	8000e40 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000e5e:	2003      	movs	r0, #3
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e6a:	d1e0      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e70:	4a22      	ldr	r2, [pc, #136]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e78:	d1d9      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_RCC_ClockConfig+0x14c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	429d      	cmp	r5, r3
 8000e88:	d209      	bcs.n	8000e9e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8a:	b2ea      	uxtb	r2, r5
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_RCC_ClockConfig+0x14c>)
 8000e8e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	429d      	cmp	r5, r3
 8000e98:	d001      	beq.n	8000e9e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
}
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f013 0f04 	tst.w	r3, #4
 8000ea4:	d006      	beq.n	8000eb4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000ea8:	6893      	ldr	r3, [r2, #8]
 8000eaa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000eae:	68e1      	ldr	r1, [r4, #12]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f013 0f08 	tst.w	r3, #8
 8000eba:	d007      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000ebe:	6893      	ldr	r3, [r2, #8]
 8000ec0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ec4:	6921      	ldr	r1, [r4, #16]
 8000ec6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ecc:	f7ff ff04 	bl	8000cd8 <HAL_RCC_GetSysClockFreq>
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_RCC_ClockConfig+0x150>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <HAL_RCC_ClockConfig+0x154>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	40d8      	lsrs	r0, r3
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_RCC_ClockConfig+0x158>)
 8000ee0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_RCC_ClockConfig+0x15c>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	f7ff fb5b 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	4770      	bx	lr
        return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00
 8000efc:	40023800 	.word	0x40023800
 8000f00:	080028ec 	.word	0x080028ec
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f18:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f1a:	f7ff fff7 	bl	8000f0c <HAL_RCC_GetHCLKFreq>
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f2a:	40d8      	lsrs	r0, r3
 8000f2c:	bd08      	pop	{r3, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	080028fc 	.word	0x080028fc

08000f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f3a:	f7ff ffe7 	bl	8000f0c <HAL_RCC_GetHCLKFreq>
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f4a:	40d8      	lsrs	r0, r3
 8000f4c:	bd08      	pop	{r3, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	080028fc 	.word	0x080028fc

08000f58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000f5e:	6803      	ldr	r3, [r0, #0]
 8000f60:	f013 0f05 	tst.w	r3, #5
 8000f64:	d10e      	bne.n	8000f84 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	f013 0f02 	tst.w	r3, #2
 8000f6c:	d138      	bne.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f013 0f08 	tst.w	r3, #8
 8000f74:	f000 809b 	beq.w	80010ae <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000f78:	7d22      	ldrb	r2, [r4, #20]
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8000f7e:	2000      	movs	r0, #0
}
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8000f84:	2200      	movs	r2, #0
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000f88:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000f8a:	f7ff fb53 	bl	8000634 <HAL_GetTick>
 8000f8e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000f98:	d006      	beq.n	8000fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000f9a:	f7ff fb4b 	bl	8000634 <HAL_GetTick>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9f5      	bls.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e7eb      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	68a2      	ldr	r2, [r4, #8]
 8000fac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fb0:	68e2      	ldr	r2, [r4, #12]
 8000fb2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000fb6:	4a41      	ldr	r2, [pc, #260]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000fc0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000fc2:	f7ff fb37 	bl	8000634 <HAL_GetTick>
 8000fc6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000fd0:	d1c9      	bne.n	8000f66 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000fd2:	f7ff fb2f 	bl	8000634 <HAL_GetTick>
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f5      	bls.n	8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8000fdc:	2003      	movs	r0, #3
 8000fde:	e7cf      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	4b35      	ldr	r3, [pc, #212]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001002:	f7ff fb17 	bl	8000634 <HAL_GetTick>
 8001006:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001010:	d106      	bne.n	8001020 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001012:	f7ff fb0f 	bl	8000634 <HAL_GetTick>
 8001016:	1b40      	subs	r0, r0, r5
 8001018:	2802      	cmp	r0, #2
 800101a:	d9f5      	bls.n	8001008 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 800101c:	2003      	movs	r0, #3
 800101e:	e7af      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001024:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001028:	d012      	beq.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800102a:	6922      	ldr	r2, [r4, #16]
 800102c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001038:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800103c:	4921      	ldr	r1, [pc, #132]	; (80010c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800103e:	2001      	movs	r0, #1
 8001040:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001042:	2000      	movs	r0, #0
 8001044:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001046:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104a:	f013 0f01 	tst.w	r3, #1
 800104e:	d112      	bne.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001050:	6923      	ldr	r3, [r4, #16]
 8001052:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001056:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800105a:	d01d      	beq.n	8001098 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800105e:	6893      	ldr	r3, [r2, #8]
 8001060:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001064:	6093      	str	r3, [r2, #8]
 8001066:	4915      	ldr	r1, [pc, #84]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001068:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800106a:	6922      	ldr	r2, [r4, #16]
 800106c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001070:	4313      	orrs	r3, r2
 8001072:	670b      	str	r3, [r1, #112]	; 0x70
 8001074:	e77b      	b.n	8000f6e <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8001076:	f7ff fadd 	bl	8000634 <HAL_GetTick>
 800107a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800107e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001080:	f013 0f02 	tst.w	r3, #2
 8001084:	d1e4      	bne.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fad5 	bl	8000634 <HAL_GetTick>
 800108a:	1b40      	subs	r0, r0, r5
 800108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001090:	4298      	cmp	r0, r3
 8001092:	d9f3      	bls.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 8001094:	2003      	movs	r0, #3
 8001096:	e773      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001098:	4908      	ldr	r1, [pc, #32]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800109a:	688a      	ldr	r2, [r1, #8]
 800109c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80010a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80010a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
 80010ac:	e7db      	b.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	e766      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80010b2:	bf00      	nop
 80010b4:	424711e0 	.word	0x424711e0
 80010b8:	42470068 	.word	0x42470068
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000
 80010c4:	42470e40 	.word	0x42470e40

080010c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80010cc:	6802      	ldr	r2, [r0, #0]
 80010ce:	68d3      	ldr	r3, [r2, #12]
 80010d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80010d4:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d6:	f7ff faad 	bl	8000634 <HAL_GetTick>
 80010da:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f013 0f20 	tst.w	r3, #32
 80010e4:	d107      	bne.n	80010f6 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80010e6:	f7ff faa5 	bl	8000634 <HAL_GetTick>
 80010ea:	1b40      	subs	r0, r0, r5
 80010ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010f0:	d9f4      	bls.n	80010dc <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80010f2:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80010f6:	2000      	movs	r0, #0
 80010f8:	bd38      	pop	{r3, r4, r5, pc}

080010fa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80010fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001104:	d001      	beq.n	800110a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001106:	2000      	movs	r0, #0
 8001108:	bd38      	pop	{r3, r4, r5, pc}
 800110a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001112:	f7ff fa8f 	bl	8000634 <HAL_GetTick>
 8001116:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001120:	d107      	bne.n	8001132 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001122:	f7ff fa87 	bl	8000634 <HAL_GetTick>
 8001126:	1b40      	subs	r0, r0, r5
 8001128:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800112c:	d9f4      	bls.n	8001118 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800112e:	2003      	movs	r0, #3
}
 8001130:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001132:	2000      	movs	r0, #0
 8001134:	bd38      	pop	{r3, r4, r5, pc}

08001136 <HAL_RTC_Init>:
{
 8001136:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001138:	2800      	cmp	r0, #0
 800113a:	d05c      	beq.n	80011f6 <HAL_RTC_Init+0xc0>
 800113c:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800113e:	7f43      	ldrb	r3, [r0, #29]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d041      	beq.n	80011c8 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001144:	2302      	movs	r3, #2
 8001146:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	22ca      	movs	r2, #202	; 0xca
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	2253      	movs	r2, #83	; 0x53
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ffd0 	bl	80010fa <RTC_EnterInitMode>
 800115a:	4605      	mov	r5, r0
 800115c:	2800      	cmp	r0, #0
 800115e:	d137      	bne.n	80011d0 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800116c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800116e:	6821      	ldr	r1, [r4, #0]
 8001170:	688a      	ldr	r2, [r1, #8]
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	6920      	ldr	r0, [r4, #16]
 8001176:	4303      	orrs	r3, r0
 8001178:	6960      	ldr	r0, [r4, #20]
 800117a:	4303      	orrs	r3, r0
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	68e2      	ldr	r2, [r4, #12]
 8001184:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001186:	6822      	ldr	r2, [r4, #0]
 8001188:	6913      	ldr	r3, [r2, #16]
 800118a:	68a1      	ldr	r1, [r4, #8]
 800118c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001190:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	68d3      	ldr	r3, [r2, #12]
 8001196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800119a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f013 0f20 	tst.w	r3, #32
 80011a4:	d01b      	beq.n	80011de <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80011b0:	6822      	ldr	r2, [r4, #0]
 80011b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011b4:	69a1      	ldr	r1, [r4, #24]
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	22ff      	movs	r2, #255	; 0xff
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80011c0:	2301      	movs	r3, #1
 80011c2:	7763      	strb	r3, [r4, #29]
}
 80011c4:	4628      	mov	r0, r5
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80011c8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80011ca:	f000 fe61 	bl	8001e90 <HAL_RTC_MspInit>
 80011ce:	e7b9      	b.n	8001144 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	22ff      	movs	r2, #255	; 0xff
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80011d6:	2304      	movs	r3, #4
 80011d8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80011da:	2501      	movs	r5, #1
 80011dc:	e7f2      	b.n	80011c4 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff ff72 	bl	80010c8 <HAL_RTC_WaitForSynchro>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0de      	beq.n	80011a6 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80011ee:	2304      	movs	r3, #4
 80011f0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80011f2:	2501      	movs	r5, #1
 80011f4:	e7e6      	b.n	80011c4 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 80011f6:	2501      	movs	r5, #1
 80011f8:	e7e4      	b.n	80011c4 <HAL_RTC_Init+0x8e>

080011fa <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80011fa:	2300      	movs	r3, #0

  while(Value >= 10U)
 80011fc:	e002      	b.n	8001204 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80011fe:	3301      	adds	r3, #1
    Value -= 10U;
 8001200:	380a      	subs	r0, #10
 8001202:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001204:	2809      	cmp	r0, #9
 8001206:	d8fa      	bhi.n	80011fe <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	b2db      	uxtb	r3, r3
}
 800120c:	4318      	orrs	r0, r3
 800120e:	4770      	bx	lr

08001210 <HAL_RTC_SetTime>:
{
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001212:	7f03      	ldrb	r3, [r0, #28]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d077      	beq.n	8001308 <HAL_RTC_SetTime+0xf8>
 8001218:	460e      	mov	r6, r1
 800121a:	4604      	mov	r4, r0
 800121c:	2301      	movs	r3, #1
 800121e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001220:	2302      	movs	r3, #2
 8001222:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001224:	2a00      	cmp	r2, #0
 8001226:	d146      	bne.n	80012b6 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001230:	d101      	bne.n	8001236 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001236:	7830      	ldrb	r0, [r6, #0]
 8001238:	f7ff ffdf 	bl	80011fa <RTC_ByteToBcd2>
 800123c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800123e:	7870      	ldrb	r0, [r6, #1]
 8001240:	f7ff ffdb 	bl	80011fa <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001244:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001248:	78b0      	ldrb	r0, [r6, #2]
 800124a:	f7ff ffd6 	bl	80011fa <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800124e:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001250:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001252:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	22ca      	movs	r2, #202	; 0xca
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	2253      	movs	r2, #83	; 0x53
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff49 	bl	80010fa <RTC_EnterInitMode>
 8001268:	4607      	mov	r7, r0
 800126a:	2800      	cmp	r0, #0
 800126c:	d135      	bne.n	80012da <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8001274:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8001278:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	6893      	ldr	r3, [r2, #8]
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001284:	6821      	ldr	r1, [r4, #0]
 8001286:	688b      	ldr	r3, [r1, #8]
 8001288:	68f2      	ldr	r2, [r6, #12]
 800128a:	6930      	ldr	r0, [r6, #16]
 800128c:	4302      	orrs	r2, r0
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	68d3      	ldr	r3, [r2, #12]
 8001296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800129a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f013 0f20 	tst.w	r3, #32
 80012a4:	d022      	beq.n	80012ec <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80012ac:	2301      	movs	r3, #1
 80012ae:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80012b0:	2300      	movs	r3, #0
 80012b2:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80012b4:	e029      	b.n	800130a <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80012b6:	6803      	ldr	r3, [r0, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80012be:	d101      	bne.n	80012c4 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012c4:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80012c6:	7870      	ldrb	r0, [r6, #1]
 80012c8:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80012ce:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80012d0:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80012d2:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80012d4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80012d8:	e7bd      	b.n	8001256 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80012e0:	2304      	movs	r3, #4
 80012e2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80012e4:	2300      	movs	r3, #0
 80012e6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80012e8:	2701      	movs	r7, #1
 80012ea:	e00e      	b.n	800130a <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff feeb 	bl	80010c8 <HAL_RTC_WaitForSynchro>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d0d7      	beq.n	80012a6 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80012fc:	2304      	movs	r3, #4
 80012fe:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001300:	2300      	movs	r3, #0
 8001302:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001304:	2701      	movs	r7, #1
 8001306:	e000      	b.n	800130a <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8001308:	2702      	movs	r7, #2
}
 800130a:	4638      	mov	r0, r7
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800130e <HAL_RTC_SetDate>:
{
 800130e:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8001310:	7f03      	ldrb	r3, [r0, #28]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d065      	beq.n	80013e2 <HAL_RTC_SetDate+0xd4>
 8001316:	2301      	movs	r3, #1
 8001318:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800131e:	b93a      	cbnz	r2, 8001330 <HAL_RTC_SetDate+0x22>
 8001320:	784b      	ldrb	r3, [r1, #1]
 8001322:	f013 0f10 	tst.w	r3, #16
 8001326:	d003      	beq.n	8001330 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001328:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800132c:	330a      	adds	r3, #10
 800132e:	704b      	strb	r3, [r1, #1]
 8001330:	460e      	mov	r6, r1
 8001332:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8001334:	2a00      	cmp	r2, #0
 8001336:	d132      	bne.n	800139e <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001338:	78c8      	ldrb	r0, [r1, #3]
 800133a:	f7ff ff5e 	bl	80011fa <RTC_ByteToBcd2>
 800133e:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001340:	7870      	ldrb	r0, [r6, #1]
 8001342:	f7ff ff5a 	bl	80011fa <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001346:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800134a:	78b0      	ldrb	r0, [r6, #2]
 800134c:	f7ff ff55 	bl	80011fa <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001350:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 8001352:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001354:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	22ca      	movs	r2, #202	; 0xca
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	2253      	movs	r2, #83	; 0x53
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff fec8 	bl	80010fa <RTC_EnterInitMode>
 800136a:	4606      	mov	r6, r0
 800136c:	bb10      	cbnz	r0, 80013b4 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8001374:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8001378:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800137a:	6822      	ldr	r2, [r4, #0]
 800137c:	68d3      	ldr	r3, [r2, #12]
 800137e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001382:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f013 0f20 	tst.w	r3, #32
 800138c:	d01b      	beq.n	80013c6 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001394:	2301      	movs	r3, #1
 8001396:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001398:	2300      	movs	r3, #0
 800139a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 800139c:	e022      	b.n	80013e4 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800139e:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80013a0:	7848      	ldrb	r0, [r1, #1]
 80013a2:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80013a4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 80013a8:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80013aa:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 80013ac:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80013ae:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80013b2:	e7d1      	b.n	8001358 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80013ba:	2304      	movs	r3, #4
 80013bc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80013be:	2300      	movs	r3, #0
 80013c0:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80013c2:	2601      	movs	r6, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff fe7e 	bl	80010c8 <HAL_RTC_WaitForSynchro>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d0de      	beq.n	800138e <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80013d6:	2304      	movs	r3, #4
 80013d8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80013da:	2300      	movs	r3, #0
 80013dc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80013de:	2601      	movs	r6, #1
 80013e0:	e000      	b.n	80013e4 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 80013e2:	2602      	movs	r6, #2
}
 80013e4:	4630      	mov	r0, r6
 80013e6:	bd70      	pop	{r4, r5, r6, pc}

080013e8 <HAL_RTC_SetAlarm>:
{
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80013ea:	7f03      	ldrb	r3, [r0, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f000 80a9 	beq.w	8001544 <HAL_RTC_SetAlarm+0x15c>
 80013f2:	460d      	mov	r5, r1
 80013f4:	4604      	mov	r4, r0
 80013f6:	2301      	movs	r3, #1
 80013f8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d14d      	bne.n	800149e <HAL_RTC_SetAlarm+0xb6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f013 0f40 	tst.w	r3, #64	; 0x40
 800140a:	d101      	bne.n	8001410 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	70cb      	strb	r3, [r1, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001410:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001412:	7828      	ldrb	r0, [r5, #0]
 8001414:	f7ff fef1 	bl	80011fa <RTC_ByteToBcd2>
 8001418:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800141a:	7868      	ldrb	r0, [r5, #1]
 800141c:	f7ff feed 	bl	80011fa <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001420:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001424:	78a8      	ldrb	r0, [r5, #2]
 8001426:	f7ff fee8 	bl	80011fa <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800142a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800142c:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800142e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001432:	f895 0020 	ldrb.w	r0, [r5, #32]
 8001436:	f7ff fee0 	bl	80011fa <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800143a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800143e:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8001440:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001442:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001444:	686f      	ldr	r7, [r5, #4]
 8001446:	69ab      	ldr	r3, [r5, #24]
 8001448:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	22ca      	movs	r2, #202	; 0xca
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	2253      	movs	r2, #83	; 0x53
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800145c:	d039      	beq.n	80014d2 <HAL_RTC_SetAlarm+0xea>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	6893      	ldr	r3, [r2, #8]
 8001462:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001466:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	6893      	ldr	r3, [r2, #8]
 800146c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001470:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001472:	f7ff f8df 	bl	8000634 <HAL_GetTick>
 8001476:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	f012 0f02 	tst.w	r2, #2
 8001480:	d150      	bne.n	8001524 <HAL_RTC_SetAlarm+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001482:	f7ff f8d7 	bl	8000634 <HAL_GetTick>
 8001486:	1b40      	subs	r0, r0, r5
 8001488:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800148c:	d9f4      	bls.n	8001478 <HAL_RTC_SetAlarm+0x90>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	22ff      	movs	r2, #255	; 0xff
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001498:	2300      	movs	r3, #0
 800149a:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 800149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800149e:	6803      	ldr	r3, [r0, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014a6:	d101      	bne.n	80014ac <HAL_RTC_SetAlarm+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	70cb      	strb	r3, [r1, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80014ac:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80014ae:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80014b0:	786b      	ldrb	r3, [r5, #1]
 80014b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80014b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80014b8:	78aa      	ldrb	r2, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80014ba:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80014bc:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80014be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80014c2:	f895 2020 	ldrb.w	r2, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80014c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80014ca:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 80014cc:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80014ce:	431e      	orrs	r6, r3
 80014d0:	e7b8      	b.n	8001444 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014da:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6893      	ldr	r3, [r2, #8]
 80014e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80014e6:	f7ff f8a5 	bl	8000634 <HAL_GetTick>
 80014ea:	4605      	mov	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	f012 0f01 	tst.w	r2, #1
 80014f4:	d10d      	bne.n	8001512 <HAL_RTC_SetAlarm+0x12a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80014f6:	f7ff f89d 	bl	8000634 <HAL_GetTick>
 80014fa:	1b40      	subs	r0, r0, r5
 80014fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001500:	d9f4      	bls.n	80014ec <HAL_RTC_SetAlarm+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	22ff      	movs	r2, #255	; 0xff
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001508:	2003      	movs	r0, #3
 800150a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800150c:	2300      	movs	r3, #0
 800150e:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001512:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001518:	6822      	ldr	r2, [r4, #0]
 800151a:	6893      	ldr	r3, [r2, #8]
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6093      	str	r3, [r2, #8]
 8001522:	e007      	b.n	8001534 <HAL_RTC_SetAlarm+0x14c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001524:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	6893      	ldr	r3, [r2, #8]
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	22ff      	movs	r2, #255	; 0xff
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800153a:	2301      	movs	r3, #1
 800153c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800153e:	2000      	movs	r0, #0
 8001540:	7720      	strb	r0, [r4, #28]
  return HAL_OK;
 8001542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8001544:	2002      	movs	r0, #2
}
 8001546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800154c:	6802      	ldr	r2, [r0, #0]
 800154e:	6913      	ldr	r3, [r2, #16]
 8001550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001554:	68c1      	ldr	r1, [r0, #12]
 8001556:	430b      	orrs	r3, r1
 8001558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800155a:	6883      	ldr	r3, [r0, #8]
 800155c:	6902      	ldr	r2, [r0, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	6942      	ldr	r2, [r0, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	69c2      	ldr	r2, [r0, #28]
 8001566:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8001568:	6801      	ldr	r1, [r0, #0]
 800156a:	68ca      	ldr	r2, [r1, #12]
 800156c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001570:	f022 020c 	bic.w	r2, r2, #12
 8001574:	4313      	orrs	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	6953      	ldr	r3, [r2, #20]
 800157c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001580:	6981      	ldr	r1, [r0, #24]
 8001582:	430b      	orrs	r3, r1
 8001584:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001586:	69c3      	ldr	r3, [r0, #28]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	d034      	beq.n	80015f8 <UART_SetConfig+0xb0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800158e:	6803      	ldr	r3, [r0, #0]
 8001590:	4a60      	ldr	r2, [pc, #384]	; (8001714 <UART_SetConfig+0x1cc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f000 8092 	beq.w	80016bc <UART_SetConfig+0x174>
 8001598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159c:	4293      	cmp	r3, r2
 800159e:	f000 808d 	beq.w	80016bc <UART_SetConfig+0x174>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80015a2:	f7ff fcb9 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015a6:	6825      	ldr	r5, [r4, #0]
 80015a8:	2100      	movs	r1, #0
 80015aa:	1806      	adds	r6, r0, r0
 80015ac:	eb41 0701 	adc.w	r7, r1, r1
 80015b0:	1836      	adds	r6, r6, r0
 80015b2:	414f      	adcs	r7, r1
 80015b4:	00fb      	lsls	r3, r7, #3
 80015b6:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 80015ba:	00f2      	lsls	r2, r6, #3
 80015bc:	4616      	mov	r6, r2
 80015be:	461f      	mov	r7, r3
 80015c0:	6863      	ldr	r3, [r4, #4]
 80015c2:	009a      	lsls	r2, r3, #2
 80015c4:	0f9b      	lsrs	r3, r3, #30
 80015c6:	1980      	adds	r0, r0, r6
 80015c8:	4179      	adcs	r1, r7
 80015ca:	f7fe fe61 	bl	8000290 <__aeabi_uldivmod>
 80015ce:	4c52      	ldr	r4, [pc, #328]	; (8001718 <UART_SetConfig+0x1d0>)
 80015d0:	fba4 3200 	umull	r3, r2, r4, r0
 80015d4:	0951      	lsrs	r1, r2, #5
 80015d6:	2264      	movs	r2, #100	; 0x64
 80015d8:	fb02 0211 	mls	r2, r2, r1, r0
 80015dc:	0113      	lsls	r3, r2, #4
 80015de:	3332      	adds	r3, #50	; 0x32
 80015e0:	fba4 2303 	umull	r2, r3, r4, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4413      	add	r3, r2
 80015f4:	60ab      	str	r3, [r5, #8]
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	4a46      	ldr	r2, [pc, #280]	; (8001714 <UART_SetConfig+0x1cc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d030      	beq.n	8001662 <UART_SetConfig+0x11a>
 8001600:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001604:	4293      	cmp	r3, r2
 8001606:	d02c      	beq.n	8001662 <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001608:	f7ff fc86 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800160c:	6825      	ldr	r5, [r4, #0]
 800160e:	2100      	movs	r1, #0
 8001610:	1806      	adds	r6, r0, r0
 8001612:	eb41 0701 	adc.w	r7, r1, r1
 8001616:	1836      	adds	r6, r6, r0
 8001618:	414f      	adcs	r7, r1
 800161a:	00fb      	lsls	r3, r7, #3
 800161c:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 8001620:	00f2      	lsls	r2, r6, #3
 8001622:	4616      	mov	r6, r2
 8001624:	461f      	mov	r7, r3
 8001626:	6862      	ldr	r2, [r4, #4]
 8001628:	2300      	movs	r3, #0
 800162a:	1892      	adds	r2, r2, r2
 800162c:	415b      	adcs	r3, r3
 800162e:	1980      	adds	r0, r0, r6
 8001630:	4179      	adcs	r1, r7
 8001632:	f7fe fe2d 	bl	8000290 <__aeabi_uldivmod>
 8001636:	4c38      	ldr	r4, [pc, #224]	; (8001718 <UART_SetConfig+0x1d0>)
 8001638:	fba4 3200 	umull	r3, r2, r4, r0
 800163c:	0951      	lsrs	r1, r2, #5
 800163e:	2264      	movs	r2, #100	; 0x64
 8001640:	fb02 0211 	mls	r2, r2, r1, r0
 8001644:	00d3      	lsls	r3, r2, #3
 8001646:	3332      	adds	r3, #50	; 0x32
 8001648:	fba4 2303 	umull	r2, r3, r4, r3
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	005a      	lsls	r2, r3, #1
 8001650:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001654:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4413      	add	r3, r2
 800165e:	60ab      	str	r3, [r5, #8]
 8001660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8001662:	f7ff fc69 	bl	8000f38 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001666:	6825      	ldr	r5, [r4, #0]
 8001668:	2100      	movs	r1, #0
 800166a:	1806      	adds	r6, r0, r0
 800166c:	eb41 0701 	adc.w	r7, r1, r1
 8001670:	1836      	adds	r6, r6, r0
 8001672:	414f      	adcs	r7, r1
 8001674:	00fb      	lsls	r3, r7, #3
 8001676:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800167a:	00f2      	lsls	r2, r6, #3
 800167c:	4616      	mov	r6, r2
 800167e:	461f      	mov	r7, r3
 8001680:	6862      	ldr	r2, [r4, #4]
 8001682:	2300      	movs	r3, #0
 8001684:	1892      	adds	r2, r2, r2
 8001686:	415b      	adcs	r3, r3
 8001688:	1980      	adds	r0, r0, r6
 800168a:	4179      	adcs	r1, r7
 800168c:	f7fe fe00 	bl	8000290 <__aeabi_uldivmod>
 8001690:	4c21      	ldr	r4, [pc, #132]	; (8001718 <UART_SetConfig+0x1d0>)
 8001692:	fba4 3200 	umull	r3, r2, r4, r0
 8001696:	0951      	lsrs	r1, r2, #5
 8001698:	2264      	movs	r2, #100	; 0x64
 800169a:	fb02 0211 	mls	r2, r2, r1, r0
 800169e:	00d3      	lsls	r3, r2, #3
 80016a0:	3332      	adds	r3, #50	; 0x32
 80016a2:	fba4 2303 	umull	r2, r3, r4, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	005a      	lsls	r2, r3, #1
 80016aa:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80016ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	4413      	add	r3, r2
 80016b8:	60ab      	str	r3, [r5, #8]
 80016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80016bc:	f7ff fc3c 	bl	8000f38 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016c0:	6825      	ldr	r5, [r4, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	1806      	adds	r6, r0, r0
 80016c6:	eb41 0701 	adc.w	r7, r1, r1
 80016ca:	1836      	adds	r6, r6, r0
 80016cc:	414f      	adcs	r7, r1
 80016ce:	00fb      	lsls	r3, r7, #3
 80016d0:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 80016d4:	00f2      	lsls	r2, r6, #3
 80016d6:	4616      	mov	r6, r2
 80016d8:	461f      	mov	r7, r3
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	009a      	lsls	r2, r3, #2
 80016de:	0f9b      	lsrs	r3, r3, #30
 80016e0:	1980      	adds	r0, r0, r6
 80016e2:	4179      	adcs	r1, r7
 80016e4:	f7fe fdd4 	bl	8000290 <__aeabi_uldivmod>
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <UART_SetConfig+0x1d0>)
 80016ea:	fba4 3200 	umull	r3, r2, r4, r0
 80016ee:	0951      	lsrs	r1, r2, #5
 80016f0:	2264      	movs	r2, #100	; 0x64
 80016f2:	fb02 0211 	mls	r2, r2, r1, r0
 80016f6:	0113      	lsls	r3, r2, #4
 80016f8:	3332      	adds	r3, #50	; 0x32
 80016fa:	fba4 2303 	umull	r2, r3, r4, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001704:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4413      	add	r3, r2
 800170e:	60ab      	str	r3, [r5, #8]
 8001710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001712:	bf00      	nop
 8001714:	40011000 	.word	0x40011000
 8001718:	51eb851f 	.word	0x51eb851f

0800171c <UART_WaitOnFlagUntilTimeout>:
{
 800171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001720:	4605      	mov	r5, r0
 8001722:	460f      	mov	r7, r1
 8001724:	4616      	mov	r6, r2
 8001726:	4698      	mov	r8, r3
 8001728:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ea37 0303 	bics.w	r3, r7, r3
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	42b3      	cmp	r3, r6
 800173a:	d11e      	bne.n	800177a <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800173c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001740:	d0f3      	beq.n	800172a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001742:	b12c      	cbz	r4, 8001750 <UART_WaitOnFlagUntilTimeout+0x34>
 8001744:	f7fe ff76 	bl	8000634 <HAL_GetTick>
 8001748:	eba0 0008 	sub.w	r0, r0, r8
 800174c:	4284      	cmp	r4, r0
 800174e:	d2ec      	bcs.n	800172a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001750:	682a      	ldr	r2, [r5, #0]
 8001752:	68d3      	ldr	r3, [r2, #12]
 8001754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001758:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800175a:	682a      	ldr	r2, [r5, #0]
 800175c:	6953      	ldr	r3, [r2, #20]
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001764:	2320      	movs	r3, #32
 8001766:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800176a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800176e:	2300      	movs	r3, #0
 8001770:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001774:	2003      	movs	r0, #3
 8001776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800177a:	2000      	movs	r0, #0
}
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001780 <HAL_UART_Init>:
  if (huart == NULL)
 8001780:	b358      	cbz	r0, 80017da <HAL_UART_Init+0x5a>
{
 8001782:	b510      	push	{r4, lr}
 8001784:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001786:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800178a:	b30b      	cbz	r3, 80017d0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800178c:	2324      	movs	r3, #36	; 0x24
 800178e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	68d3      	ldr	r3, [r2, #12]
 8001796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800179a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fed3 	bl	8001548 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	6913      	ldr	r3, [r2, #16]
 80017a6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80017aa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	6953      	ldr	r3, [r2, #20]
 80017b0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80017b4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	68d3      	ldr	r3, [r2, #12]
 80017ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017be:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c0:	2000      	movs	r0, #0
 80017c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017c4:	2320      	movs	r3, #32
 80017c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80017ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80017d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017d4:	f000 fb6a 	bl	8001eac <HAL_UART_MspInit>
 80017d8:	e7d8      	b.n	800178c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80017da:	2001      	movs	r0, #1
 80017dc:	4770      	bx	lr

080017de <HAL_UART_Transmit>:
{
 80017de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80017e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d004      	beq.n	80017fa <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	b003      	add	sp, #12
 80017f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001800:	2900      	cmp	r1, #0
 8001802:	d056      	beq.n	80018b2 <HAL_UART_Transmit+0xd4>
 8001804:	2a00      	cmp	r2, #0
 8001806:	d056      	beq.n	80018b6 <HAL_UART_Transmit+0xd8>
    __HAL_LOCK(huart);
 8001808:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_UART_Transmit+0x36>
 8001810:	2302      	movs	r3, #2
 8001812:	e7ee      	b.n	80017f2 <HAL_UART_Transmit+0x14>
 8001814:	2301      	movs	r3, #1
 8001816:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181a:	f04f 0900 	mov.w	r9, #0
 800181e:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001822:	2321      	movs	r3, #33	; 0x21
 8001824:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001828:	f7fe ff04 	bl	8000634 <HAL_GetTick>
 800182c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800182e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001832:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001836:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800183a:	e010      	b.n	800185e <HAL_UART_Transmit+0x80>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800183c:	9600      	str	r6, [sp, #0]
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff ff69 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 800184a:	2800      	cmp	r0, #0
 800184c:	d135      	bne.n	80018ba <HAL_UART_Transmit+0xdc>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	882b      	ldrh	r3, [r5, #0]
 8001852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001856:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001858:	6923      	ldr	r3, [r4, #16]
 800185a:	b9cb      	cbnz	r3, 8001890 <HAL_UART_Transmit+0xb2>
          pData += 2U;
 800185c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800185e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001860:	b29b      	uxth	r3, r3
 8001862:	b1bb      	cbz	r3, 8001894 <HAL_UART_Transmit+0xb6>
      huart->TxXferCount--;
 8001864:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800186e:	68a3      	ldr	r3, [r4, #8]
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001874:	d0e2      	beq.n	800183c <HAL_UART_Transmit+0x5e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001876:	9600      	str	r6, [sp, #0]
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ff4c 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 8001884:	b9d8      	cbnz	r0, 80018be <HAL_UART_Transmit+0xe0>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	782a      	ldrb	r2, [r5, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	3501      	adds	r5, #1
 800188e:	e7e6      	b.n	800185e <HAL_UART_Transmit+0x80>
          pData += 1U;
 8001890:	3501      	adds	r5, #1
 8001892:	e7e4      	b.n	800185e <HAL_UART_Transmit+0x80>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001894:	9600      	str	r6, [sp, #0]
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff ff3d 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b108      	cbz	r0, 80018aa <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e7a3      	b.n	80017f2 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80018aa:	2220      	movs	r2, #32
 80018ac:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 80018b0:	e79f      	b.n	80017f2 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e79d      	b.n	80017f2 <HAL_UART_Transmit+0x14>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e79b      	b.n	80017f2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e799      	b.n	80017f2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e797      	b.n	80017f2 <HAL_UART_Transmit+0x14>

080018c2 <HAL_UART_Receive>:
{
 80018c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80018ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d003      	beq.n	80018dc <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 80018d4:	2002      	movs	r0, #2
}
 80018d6:	b003      	add	sp, #12
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	4604      	mov	r4, r0
 80018de:	460d      	mov	r5, r1
 80018e0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80018e2:	2900      	cmp	r1, #0
 80018e4:	d05a      	beq.n	800199c <HAL_UART_Receive+0xda>
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d05a      	beq.n	80019a0 <HAL_UART_Receive+0xde>
    __HAL_LOCK(huart);
 80018ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_UART_Receive+0x34>
 80018f2:	2002      	movs	r0, #2
 80018f4:	e7ef      	b.n	80018d6 <HAL_UART_Receive+0x14>
 80018f6:	2301      	movs	r3, #1
 80018f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fc:	f04f 0900 	mov.w	r9, #0
 8001900:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001904:	2322      	movs	r3, #34	; 0x22
 8001906:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800190a:	f7fe fe93 	bl	8000634 <HAL_GetTick>
 800190e:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8001910:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001914:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8001918:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800191c:	e01d      	b.n	800195a <HAL_UART_Receive+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	9600      	str	r6, [sp, #0]
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	2120      	movs	r1, #32
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff fef8 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 800192c:	2800      	cmp	r0, #0
 800192e:	d139      	bne.n	80019a4 <HAL_UART_Receive+0xe2>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001930:	6923      	ldr	r3, [r4, #16]
 8001932:	b933      	cbnz	r3, 8001942 <HAL_UART_Receive+0x80>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193c:	f825 3b02 	strh.w	r3, [r5], #2
 8001940:	e00b      	b.n	800195a <HAL_UART_Receive+0x98>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f825 3b01 	strh.w	r3, [r5], #1
 800194c:	e005      	b.n	800195a <HAL_UART_Receive+0x98>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001956:	702b      	strb	r3, [r5, #0]
 8001958:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 800195a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800195c:	b29b      	uxth	r3, r3
 800195e:	b1c3      	cbz	r3, 8001992 <HAL_UART_Receive+0xd0>
      huart->RxXferCount--;
 8001960:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29b      	uxth	r3, r3
 8001968:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800196a:	68a3      	ldr	r3, [r4, #8]
 800196c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001970:	d0d5      	beq.n	800191e <HAL_UART_Receive+0x5c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001972:	9600      	str	r6, [sp, #0]
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	2120      	movs	r1, #32
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff fece 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 8001980:	b990      	cbnz	r0, 80019a8 <HAL_UART_Receive+0xe6>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001982:	6923      	ldr	r3, [r4, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e2      	bne.n	800194e <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	702b      	strb	r3, [r5, #0]
 800198e:	3501      	adds	r5, #1
 8001990:	e7e3      	b.n	800195a <HAL_UART_Receive+0x98>
    huart->RxState = HAL_UART_STATE_READY;
 8001992:	2320      	movs	r3, #32
 8001994:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001998:	2000      	movs	r0, #0
 800199a:	e79c      	b.n	80018d6 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e79a      	b.n	80018d6 <HAL_UART_Receive+0x14>
 80019a0:	2001      	movs	r0, #1
 80019a2:	e798      	b.n	80018d6 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 80019a4:	2003      	movs	r0, #3
 80019a6:	e796      	b.n	80018d6 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 80019a8:	2003      	movs	r0, #3
 80019aa:	e794      	b.n	80018d6 <HAL_UART_Receive+0x14>

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b530      	push	{r4, r5, lr}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	2400      	movs	r4, #0
 80019b2:	9405      	str	r4, [sp, #20]
 80019b4:	9406      	str	r4, [sp, #24]
 80019b6:	9407      	str	r4, [sp, #28]
 80019b8:	9408      	str	r4, [sp, #32]
 80019ba:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019bc:	9401      	str	r4, [sp, #4]
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <MX_GPIO_Init+0x9c>)
 80019c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c2:	f042 0204 	orr.w	r2, r2, #4
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
 80019c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ca:	f002 0204 	and.w	r2, r2, #4
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	9402      	str	r4, [sp, #8]
 80019d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80019e2:	9202      	str	r2, [sp, #8]
 80019e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	9403      	str	r4, [sp, #12]
 80019e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
 80019f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f2:	f002 0201 	and.w	r2, r2, #1
 80019f6:	9203      	str	r2, [sp, #12]
 80019f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	9404      	str	r4, [sp, #16]
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	f042 0202 	orr.w	r2, r2, #2
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a0e:	4d0f      	ldr	r5, [pc, #60]	; (8001a4c <MX_GPIO_Init+0xa0>)
 8001a10:	4622      	mov	r2, r4
 8001a12:	2120      	movs	r1, #32
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7fe ff62 	bl	80008de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_GPIO_Init+0xa4>)
 8001a22:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	a905      	add	r1, sp, #20
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <MX_GPIO_Init+0xa8>)
 8001a2a:	f7fe fe77 	bl	800071c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	a905      	add	r1, sp, #20
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7fe fe6d 	bl	800071c <HAL_GPIO_Init>

}
 8001a42:	b00b      	add	sp, #44	; 0x2c
 8001a44:	bd30      	pop	{r4, r5, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	40020800 	.word	0x40020800

08001a58 <MX_RTC_Init>:
{
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	b090      	sub	sp, #64	; 0x40
  RTC_TimeTypeDef sTime = {0};
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a60:	940c      	str	r4, [sp, #48]	; 0x30
 8001a62:	940d      	str	r4, [sp, #52]	; 0x34
 8001a64:	940e      	str	r4, [sp, #56]	; 0x38
 8001a66:	940f      	str	r4, [sp, #60]	; 0x3c
  RTC_DateTypeDef sDate = {0};
 8001a68:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a6a:	2228      	movs	r2, #40	; 0x28
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4668      	mov	r0, sp
 8001a70:	f000 fb0a 	bl	8002088 <memset>
  hrtc.Instance = RTC;
 8001a74:	4d20      	ldr	r5, [pc, #128]	; (8001af8 <MX_RTC_Init+0xa0>)
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <MX_RTC_Init+0xa4>)
 8001a78:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a7a:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a7c:	237f      	movs	r3, #127	; 0x7f
 8001a7e:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a80:	23ff      	movs	r3, #255	; 0xff
 8001a82:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a84:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a86:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a88:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f7ff fb53 	bl	8001136 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8001a90:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001a94:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001a98:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a9c:	940e      	str	r4, [sp, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a9e:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	a90b      	add	r1, sp, #44	; 0x2c
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7ff fbb3 	bl	8001210 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001aaa:	2601      	movs	r6, #1
 8001aac:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001ab0:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
  sDate.Date = 0x1;
 8001ab4:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
  sDate.Year = 0x0;
 8001ab8:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001abc:	4632      	mov	r2, r6
 8001abe:	a90a      	add	r1, sp, #40	; 0x28
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7ff fc24 	bl	800130e <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0x0;
 8001ac6:	f88d 4000 	strb.w	r4, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001aca:	f88d 4001 	strb.w	r4, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ace:	f88d 4002 	strb.w	r4, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ad2:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ad4:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ad6:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ad8:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ada:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001adc:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ade:	f88d 6020 	strb.w	r6, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4669      	mov	r1, sp
 8001aec:	4628      	mov	r0, r5
 8001aee:	f7ff fc7b 	bl	80013e8 <HAL_RTC_SetAlarm>
}
 8001af2:	b010      	add	sp, #64	; 0x40
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
 8001af6:	bf00      	nop
 8001af8:	200001a8 	.word	0x200001a8
 8001afc:	40002800 	.word	0x40002800

08001b00 <MX_USART1_UART_Init>:
{
 8001b00:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <MX_USART1_UART_Init+0x24>)
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART1_UART_Init+0x28>)
 8001b06:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001b08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b0c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b12:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b14:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b16:	220c      	movs	r2, #12
 8001b18:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1e:	f7ff fe2f 	bl	8001780 <HAL_UART_Init>
 8001b22:	bd08      	pop	{r3, pc}
 8001b24:	20000168 	.word	0x20000168
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_USART2_UART_Init>:
{
 8001b2c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_USART2_UART_Init+0x24>)
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART2_UART_Init+0x28>)
 8001b32:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001b34:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b38:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b40:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b42:	220c      	movs	r2, #12
 8001b44:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4a:	f7ff fe19 	bl	8001780 <HAL_UART_Init>
 8001b4e:	bd08      	pop	{r3, pc}
 8001b50:	200001c8 	.word	0x200001c8
 8001b54:	40004400 	.word	0x40004400

08001b58 <SystemClock_Config>:
{
 8001b58:	b530      	push	{r4, r5, lr}
 8001b5a:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5c:	2230      	movs	r2, #48	; 0x30
 8001b5e:	2100      	movs	r1, #0
 8001b60:	a80e      	add	r0, sp, #56	; 0x38
 8001b62:	f000 fa91 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b66:	2400      	movs	r4, #0
 8001b68:	9409      	str	r4, [sp, #36]	; 0x24
 8001b6a:	940a      	str	r4, [sp, #40]	; 0x28
 8001b6c:	940b      	str	r4, [sp, #44]	; 0x2c
 8001b6e:	940c      	str	r4, [sp, #48]	; 0x30
 8001b70:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b72:	9403      	str	r4, [sp, #12]
 8001b74:	9404      	str	r4, [sp, #16]
 8001b76:	9405      	str	r4, [sp, #20]
 8001b78:	9406      	str	r4, [sp, #24]
 8001b7a:	9407      	str	r4, [sp, #28]
 8001b7c:	9408      	str	r4, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	9401      	str	r4, [sp, #4]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <SystemClock_Config+0xa4>)
 8001b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <SystemClock_Config+0xa8>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001baa:	230a      	movs	r3, #10
 8001bac:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bb6:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb8:	2502      	movs	r5, #2
 8001bba:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bbc:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bbe:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bc4:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bca:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bcc:	a80e      	add	r0, sp, #56	; 0x38
 8001bce:	f7fe fe8d 	bl	80008ec <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd6:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd8:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bde:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be2:	4629      	mov	r1, r5
 8001be4:	a809      	add	r0, sp, #36	; 0x24
 8001be6:	f7ff f8e1 	bl	8000dac <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bea:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf2:	a803      	add	r0, sp, #12
 8001bf4:	f7ff f9b0 	bl	8000f58 <HAL_RCCEx_PeriphCLKConfig>
}
 8001bf8:	b01b      	add	sp, #108	; 0x6c
 8001bfa:	bd30      	pop	{r4, r5, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000

08001c04 <main>:
{
 8001c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c08:	f5ad 6da3 	sub.w	sp, sp, #1304	; 0x518
  HAL_Init();
 8001c0c:	f7fe fcec 	bl	80005e8 <HAL_Init>
  char msg[100]={0};
 8001c10:	2664      	movs	r6, #100	; 0x64
 8001c12:	4632      	mov	r2, r6
 8001c14:	2100      	movs	r1, #0
 8001c16:	f20d 40b4 	addw	r0, sp, #1204	; 0x4b4
 8001c1a:	f000 fa35 	bl	8002088 <memset>
  char msg3[100]={0};
 8001c1e:	4632      	mov	r2, r6
 8001c20:	2100      	movs	r1, #0
 8001c22:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 8001c26:	f000 fa2f 	bl	8002088 <memset>
  char msg4[100]={0};
 8001c2a:	4632      	mov	r2, r6
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8001c30:	f000 fa2a 	bl	8002088 <memset>
  SystemClock_Config();
 8001c34:	f7ff ff90 	bl	8001b58 <SystemClock_Config>
  MX_GPIO_Init();
 8001c38:	f7ff feb8 	bl	80019ac <MX_GPIO_Init>
  MX_RTC_Init();
 8001c3c:	f7ff ff0c 	bl	8001a58 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c40:	f7ff ff5e 	bl	8001b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c44:	f7ff ff72 	bl	8001b2c <MX_USART2_UART_Init>
    HAL_UART_Transmit(&huart1, "AT\r\n", strlen("AT\r\n"),0x00ff);
 8001c48:	4c71      	ldr	r4, [pc, #452]	; (8001e10 <main+0x20c>)
 8001c4a:	23ff      	movs	r3, #255	; 0xff
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	4971      	ldr	r1, [pc, #452]	; (8001e14 <main+0x210>)
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff fdc4 	bl	80017de <HAL_UART_Transmit>
			HAL_Delay(2000);
 8001c56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c5a:	f7fe fcf1 	bl	8000640 <HAL_Delay>
	HAL_UART_Transmit(&huart1, "AT+SYSGPIODIR=19,1\r\n",strlen("AT+SYSGPIODIR=19,1\r\n"), 0x00ff);
 8001c5e:	23ff      	movs	r3, #255	; 0xff
 8001c60:	2214      	movs	r2, #20
 8001c62:	496d      	ldr	r1, [pc, #436]	; (8001e18 <main+0x214>)
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff fdba 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001c6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c6e:	f7fe fce7 	bl	8000640 <HAL_Delay>
	HAL_UART_Transmit(&huart1, "AT+CWMODE_CUR=1\r\n",strlen("AT+CWMODE_CUR=1\r\n"), 0x00ff);
 8001c72:	23ff      	movs	r3, #255	; 0xff
 8001c74:	2211      	movs	r2, #17
 8001c76:	4969      	ldr	r1, [pc, #420]	; (8001e1c <main+0x218>)
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fdb0 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001c7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c82:	f7fe fcdd 	bl	8000640 <HAL_Delay>
	HAL_UART_Receive(&huart1, msg3, 5, 2000);
 8001c86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff fe16 	bl	80018c2 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, msg3, strlen(msg3), 0x00ff);
 8001c96:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 8001c9a:	f7fe faa1 	bl	80001e0 <strlen>
 8001c9e:	4f60      	ldr	r7, [pc, #384]	; (8001e20 <main+0x21c>)
 8001ca0:	23ff      	movs	r3, #255	; 0xff
 8001ca2:	b282      	uxth	r2, r0
 8001ca4:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
 8001ca8:	4638      	mov	r0, r7
 8001caa:	f7ff fd98 	bl	80017de <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "AT+CWJAP_CUR=\"wiznet_india\",\"wiznet12345!\"\r\n",strlen("AT+CWJAP_CUR=\"wiznet_india\",\"wiznet12345!\"\r\n"), 0x00ff);
 8001cae:	23ff      	movs	r3, #255	; 0xff
 8001cb0:	222c      	movs	r2, #44	; 0x2c
 8001cb2:	495c      	ldr	r1, [pc, #368]	; (8001e24 <main+0x220>)
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fd92 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(6000);
 8001cba:	f241 7070 	movw	r0, #6000	; 0x1770
 8001cbe:	f7fe fcbf 	bl	8000640 <HAL_Delay>
	HAL_UART_Receive(&huart1, msg,10,2000);
 8001cc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	f20d 41b4 	addw	r1, sp, #1204	; 0x4b4
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff fdf8 	bl	80018c2 <HAL_UART_Receive>
	    HAL_UART_Transmit(&huart2, msg, strlen(msg),0x0ff);
 8001cd2:	f20d 40b4 	addw	r0, sp, #1204	; 0x4b4
 8001cd6:	f7fe fa83 	bl	80001e0 <strlen>
 8001cda:	23ff      	movs	r3, #255	; 0xff
 8001cdc:	b282      	uxth	r2, r0
 8001cde:	f20d 41b4 	addw	r1, sp, #1204	; 0x4b4
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f7ff fd7b 	bl	80017de <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Hello_world\n", strlen("hello_wo\n"), 0x00ff);
 8001ce8:	23ff      	movs	r3, #255	; 0xff
 8001cea:	2209      	movs	r2, #9
 8001cec:	494e      	ldr	r1, [pc, #312]	; (8001e28 <main+0x224>)
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f7ff fd75 	bl	80017de <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "AT+CIPSNTPCFG=1,5,\"cn.ntp.org.cn\"\r\n",strlen("AT+CIPSNTPCFG=1,5,\"cn.ntp.org.cn\"\r\n"), 0x00ff);
 8001cf4:	23ff      	movs	r3, #255	; 0xff
 8001cf6:	2223      	movs	r2, #35	; 0x23
 8001cf8:	494c      	ldr	r1, [pc, #304]	; (8001e2c <main+0x228>)
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fd6f 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d04:	f7fe fc9c 	bl	8000640 <HAL_Delay>
	HAL_UART_Transmit(&huart1,"AT+AZSET=\"RP2040-WizFi360-hub\",\"WizFi360EvbPico\",\"S6P9eTcy4SeUpA5Eb23fPoY33ESt4GpnYsJOchJHEXc=\"\r\n",strlen("AT+AZSET=\"RP2040-WizFi360-hub\",\"WizFi360EvbPico\",\"S6P9eTcy4SeUpA5Eb23fPoY33ESt4GpnYsJOchJHEXc=\"\r\n"),0x00ff);
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	2261      	movs	r2, #97	; 0x61
 8001d0c:	4948      	ldr	r1, [pc, #288]	; (8001e30 <main+0x22c>)
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff fd65 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001d14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d18:	f7fe fc92 	bl	8000640 <HAL_Delay>
	HAL_UART_Transmit(&huart1,"AT+MQTTTOPIC=\"devices/WizFi360EvbPico/messages/events/\",\"devices/WizFi360EvbPico/messages/devicebound/#\"\r\n",strlen("AT+MQTTTOPIC=\"devices/WizFi360EvbPico/messages/events/\",\"devices/WizFi360EvbPico/messages/devicebound/#\"\r\n"),0x00ff);
 8001d1c:	23ff      	movs	r3, #255	; 0xff
 8001d1e:	226a      	movs	r2, #106	; 0x6a
 8001d20:	4944      	ldr	r1, [pc, #272]	; (8001e34 <main+0x230>)
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff fd5b 	bl	80017de <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001d28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d2c:	f7fe fc88 	bl	8000640 <HAL_Delay>
	HAL_UART_Transmit(&huart1, "AT+AZCON\r\n", strlen("AT+AZCON\r\n"), 0x00ff);
 8001d30:	23ff      	movs	r3, #255	; 0xff
 8001d32:	220a      	movs	r2, #10
 8001d34:	4940      	ldr	r1, [pc, #256]	; (8001e38 <main+0x234>)
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff fd51 	bl	80017de <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, msg4, 100, 4000);
 8001d3c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001d40:	4632      	mov	r2, r6
 8001d42:	a9fb      	add	r1, sp, #1004	; 0x3ec
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff fdbc 	bl	80018c2 <HAL_UART_Receive>
	HAL_Delay(2000);
 8001d4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d4e:	f7fe fc77 	bl	8000640 <HAL_Delay>
 	 	*p="2.5";
 8001d52:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <main+0x238>)
 8001d54:	2300      	movs	r3, #0
 8001d56:	701a      	strb	r2, [r3, #0]
 	 	  int i=0;
 8001d58:	4698      	mov	r8, r3
  int count1=1;
 8001d5a:	2701      	movs	r7, #1
  int count=1;
 8001d5c:	463e      	mov	r6, r7
 8001d5e:	e012      	b.n	8001d86 <main+0x182>
	  if (buttonCurrent == GPIO_PIN_SET && buttonPrev == GPIO_PIN_RESET)
 8001d60:	b9cd      	cbnz	r5, 8001d96 <main+0x192>
		  if(count== GPIO_PIN_SET)
 8001d62:	2e01      	cmp	r6, #1
 8001d64:	d001      	beq.n	8001d6a <main+0x166>
			  count= GPIO_PIN_SET;
 8001d66:	4606      	mov	r6, r0
 8001d68:	e015      	b.n	8001d96 <main+0x192>
			  count= GPIO_PIN_RESET;
 8001d6a:	462e      	mov	r6, r5
 8001d6c:	e013      	b.n	8001d96 <main+0x192>
		  HAL_Delay(500);
 8001d6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d72:	f7fe fc65 	bl	8000640 <HAL_Delay>
		  HAL_UART_Transmit(&huart1,"AT+SYSGPIOWRITE=19,1\r\n",strlen("AT+SYSGPIOWRITE=19,1\r\n"),0x00ff);
 8001d76:	23ff      	movs	r3, #255	; 0xff
 8001d78:	2216      	movs	r2, #22
 8001d7a:	4931      	ldr	r1, [pc, #196]	; (8001e40 <main+0x23c>)
 8001d7c:	4824      	ldr	r0, [pc, #144]	; (8001e10 <main+0x20c>)
 8001d7e:	f7ff fd2e 	bl	80017de <HAL_UART_Transmit>
		  if(count1==1)
 8001d82:	bb6f      	cbnz	r7, 8001de0 <main+0x1dc>
		  count1=0;
 8001d84:	4625      	mov	r5, r4
	  buttonCurrent=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8001d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8a:	482e      	ldr	r0, [pc, #184]	; (8001e44 <main+0x240>)
 8001d8c:	f7fe fda0 	bl	80008d0 <HAL_GPIO_ReadPin>
 8001d90:	4604      	mov	r4, r0
	  if (buttonCurrent == GPIO_PIN_SET && buttonPrev == GPIO_PIN_RESET)
 8001d92:	2801      	cmp	r0, #1
 8001d94:	d0e4      	beq.n	8001d60 <main+0x15c>
	  if(count==1)
 8001d96:	2e01      	cmp	r6, #1
 8001d98:	d0e9      	beq.n	8001d6e <main+0x16a>
		  HAL_Delay(500);
 8001d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d9e:	f7fe fc4f 	bl	8000640 <HAL_Delay>
		  HAL_UART_Transmit(&huart1,"AT+SYSGPIOWRITE=19,0\r\n",strlen("AT+SYSGPIOWRITE=19,0\r\n"),0x00ff);
 8001da2:	23ff      	movs	r3, #255	; 0xff
 8001da4:	2216      	movs	r2, #22
 8001da6:	4928      	ldr	r1, [pc, #160]	; (8001e48 <main+0x244>)
 8001da8:	4819      	ldr	r0, [pc, #100]	; (8001e10 <main+0x20c>)
 8001daa:	f7ff fd18 	bl	80017de <HAL_UART_Transmit>
		  if(count1==0)
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d1e8      	bne.n	8001d84 <main+0x180>
			  	  	  	  HAL_Delay(500);
 8001db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db6:	f7fe fc43 	bl	8000640 <HAL_Delay>
			  	  	  	  i++;
 8001dba:	f108 0801 	add.w	r8, r8, #1
			 			  sprintf(clud_msg2,"AT+MQTTPUB=\"{\"Wizfi360_teju\":\"WizFi360\",\"Event\":%d.0}\"\r\n",i);
 8001dbe:	4642      	mov	r2, r8
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <main+0x248>)
 8001dc2:	a801      	add	r0, sp, #4
 8001dc4:	f000 f968 	bl	8002098 <siprintf>
			 			 HAL_UART_Transmit(&huart1,clud_msg1,strlen(clud_msg1),0x0fff);
 8001dc8:	a87e      	add	r0, sp, #504	; 0x1f8
 8001dca:	f7fe fa09 	bl	80001e0 <strlen>
 8001dce:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001dd2:	b282      	uxth	r2, r0
 8001dd4:	a97e      	add	r1, sp, #504	; 0x1f8
 8001dd6:	480e      	ldr	r0, [pc, #56]	; (8001e10 <main+0x20c>)
 8001dd8:	f7ff fd01 	bl	80017de <HAL_UART_Transmit>
			  count1=1;
 8001ddc:	2701      	movs	r7, #1
 8001dde:	e7d1      	b.n	8001d84 <main+0x180>
			  i++;
 8001de0:	f108 0801 	add.w	r8, r8, #1
			  HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f7fe fc2a 	bl	8000640 <HAL_Delay>
			  sprintf(clud_msg1,"AT+MQTTPUB=\"{\"Wizfi360_teju\":\"WizFi360\",\"Event\":%d.0}\"\r\n",i);
 8001dec:	4642      	mov	r2, r8
 8001dee:	4917      	ldr	r1, [pc, #92]	; (8001e4c <main+0x248>)
 8001df0:	a87e      	add	r0, sp, #504	; 0x1f8
 8001df2:	f000 f951 	bl	8002098 <siprintf>
			  HAL_UART_Transmit(&huart1,clud_msg1,strlen(clud_msg1),0x0fff);
 8001df6:	a87e      	add	r0, sp, #504	; 0x1f8
 8001df8:	f7fe f9f2 	bl	80001e0 <strlen>
 8001dfc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e00:	b282      	uxth	r2, r0
 8001e02:	a97e      	add	r1, sp, #504	; 0x1f8
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <main+0x20c>)
 8001e06:	f7ff fcea 	bl	80017de <HAL_UART_Transmit>
		  count1=0;
 8001e0a:	2700      	movs	r7, #0
 8001e0c:	e7ba      	b.n	8001d84 <main+0x180>
 8001e0e:	bf00      	nop
 8001e10:	20000168 	.word	0x20000168
 8001e14:	08002904 	.word	0x08002904
 8001e18:	0800290c 	.word	0x0800290c
 8001e1c:	08002924 	.word	0x08002924
 8001e20:	200001c8 	.word	0x200001c8
 8001e24:	08002938 	.word	0x08002938
 8001e28:	08002968 	.word	0x08002968
 8001e2c:	08002978 	.word	0x08002978
 8001e30:	0800299c 	.word	0x0800299c
 8001e34:	08002a00 	.word	0x08002a00
 8001e38:	08002a6c 	.word	0x08002a6c
 8001e3c:	08002a78 	.word	0x08002a78
 8001e40:	08002a7c 	.word	0x08002a7c
 8001e44:	40020800 	.word	0x40020800
 8001e48:	08002ad0 	.word	0x08002ad0
 8001e4c:	08002a94 	.word	0x08002a94

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b500      	push	{lr}
 8001e52:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e54:	2100      	movs	r1, #0
 8001e56:	9100      	str	r1, [sp, #0]
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_MspInit+0x3c>)
 8001e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
 8001e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e68:	9200      	str	r2, [sp, #0]
 8001e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	9101      	str	r1, [sp, #4]
 8001e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e80:	2007      	movs	r0, #7
 8001e82:	f7fe fbf1 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	b003      	add	sp, #12
 8001e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001e90:	6802      	ldr	r2, [r0, #0]
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_RTC_MspInit+0x14>)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d000      	beq.n	8001e9a <HAL_RTC_MspInit+0xa>
 8001e98:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_RTC_MspInit+0x18>)
 8001e9e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ea0:	e7fa      	b.n	8001e98 <HAL_RTC_MspInit+0x8>
 8001ea2:	bf00      	nop
 8001ea4:	40002800 	.word	0x40002800
 8001ea8:	42470e3c 	.word	0x42470e3c

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b500      	push	{lr}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9305      	str	r3, [sp, #20]
 8001eb4:	9306      	str	r3, [sp, #24]
 8001eb6:	9307      	str	r3, [sp, #28]
 8001eb8:	9308      	str	r3, [sp, #32]
 8001eba:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8001ebc:	6803      	ldr	r3, [r0, #0]
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_UART_MspInit+0xb4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d005      	beq.n	8001ed0 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d026      	beq.n	8001f18 <HAL_UART_MspInit+0x6c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eca:	b00b      	add	sp, #44	; 0x2c
 8001ecc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	9101      	str	r1, [sp, #4]
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_UART_MspInit+0xbc>)
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	f042 0210 	orr.w	r2, r2, #16
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee0:	f002 0210 	and.w	r2, r2, #16
 8001ee4:	9201      	str	r2, [sp, #4]
 8001ee6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	9102      	str	r1, [sp, #8]
 8001eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001efc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	a905      	add	r1, sp, #20
 8001f10:	4816      	ldr	r0, [pc, #88]	; (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f12:	f7fe fc03 	bl	800071c <HAL_GPIO_Init>
 8001f16:	e7d8      	b.n	8001eca <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f18:	2100      	movs	r1, #0
 8001f1a:	9103      	str	r1, [sp, #12]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_UART_MspInit+0xbc>)
 8001f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
 8001f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f28:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f2c:	9203      	str	r2, [sp, #12]
 8001f2e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	9104      	str	r1, [sp, #16]
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	9304      	str	r3, [sp, #16]
 8001f42:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f44:	230c      	movs	r3, #12
 8001f46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f50:	2307      	movs	r3, #7
 8001f52:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	a905      	add	r1, sp, #20
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <HAL_UART_MspInit+0xc0>)
 8001f58:	f7fe fbe0 	bl	800071c <HAL_GPIO_Init>
}
 8001f5c:	e7b5      	b.n	8001eca <HAL_UART_MspInit+0x1e>
 8001f5e:	bf00      	nop
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	4770      	bx	lr

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler>

08001f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7a:	4770      	bx	lr

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	4770      	bx	lr

08001f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7e:	4770      	bx	lr

08001f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f82:	f7fe fb4b 	bl	800061c <HAL_IncTick>
 8001f86:	bd08      	pop	{r3, pc}

08001f88 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001f88:	b508      	push	{r3, lr}
 8001f8a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <_sbrk+0x34>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	b142      	cbz	r2, 8001fa4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <_sbrk+0x34>)
 8001f94:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001f96:	4403      	add	r3, r0
 8001f98:	466a      	mov	r2, sp
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d806      	bhi.n	8001fac <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001f9e:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <_sbrk+0x34>)
 8001fa0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001fa2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001fa4:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <_sbrk+0x38>)
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x34>)
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	e7f2      	b.n	8001f92 <_sbrk+0xa>
		errno = ENOMEM;
 8001fac:	f000 f842 	bl	8002034 <__errno>
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	bd08      	pop	{r3, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000008c 	.word	0x2000008c
 8001fc0:	2000020c 	.word	0x2000020c

08001fc4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SystemInit+0x18>)
 8001fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002018 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800200a:	f7ff ffdb 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f000 f817 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002012:	f7ff fdf7 	bl	8001c04 <main>
  bx  lr    
 8002016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002018:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800201c:	08002b2c 	.word	0x08002b2c
  ldr  r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002024:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002028:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800202c:	2000020c 	.word	0x2000020c

08002030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC_IRQHandler>
	...

08002034 <__errno>:
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <__errno+0x8>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	4e0d      	ldr	r6, [pc, #52]	; (8002078 <__libc_init_array+0x38>)
 8002044:	4c0d      	ldr	r4, [pc, #52]	; (800207c <__libc_init_array+0x3c>)
 8002046:	1ba4      	subs	r4, r4, r6
 8002048:	10a4      	asrs	r4, r4, #2
 800204a:	2500      	movs	r5, #0
 800204c:	42a5      	cmp	r5, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	4e0b      	ldr	r6, [pc, #44]	; (8002080 <__libc_init_array+0x40>)
 8002052:	4c0c      	ldr	r4, [pc, #48]	; (8002084 <__libc_init_array+0x44>)
 8002054:	f000 fc3e 	bl	80028d4 <_init>
 8002058:	1ba4      	subs	r4, r4, r6
 800205a:	10a4      	asrs	r4, r4, #2
 800205c:	2500      	movs	r5, #0
 800205e:	42a5      	cmp	r5, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002068:	4798      	blx	r3
 800206a:	3501      	adds	r5, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002072:	4798      	blx	r3
 8002074:	3501      	adds	r5, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	08002b24 	.word	0x08002b24
 800207c:	08002b24 	.word	0x08002b24
 8002080:	08002b24 	.word	0x08002b24
 8002084:	08002b28 	.word	0x08002b28

08002088 <memset>:
 8002088:	4402      	add	r2, r0
 800208a:	4603      	mov	r3, r0
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	f803 1b01 	strb.w	r1, [r3], #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <siprintf>:
 8002098:	b40e      	push	{r1, r2, r3}
 800209a:	b500      	push	{lr}
 800209c:	b09c      	sub	sp, #112	; 0x70
 800209e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80020a2:	ab1d      	add	r3, sp, #116	; 0x74
 80020a4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80020a8:	9002      	str	r0, [sp, #8]
 80020aa:	9006      	str	r0, [sp, #24]
 80020ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020b0:	480a      	ldr	r0, [pc, #40]	; (80020dc <siprintf+0x44>)
 80020b2:	9104      	str	r1, [sp, #16]
 80020b4:	9107      	str	r1, [sp, #28]
 80020b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80020be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80020c2:	6800      	ldr	r0, [r0, #0]
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	a902      	add	r1, sp, #8
 80020c8:	f000 f866 	bl	8002198 <_svfiprintf_r>
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	b01c      	add	sp, #112	; 0x70
 80020d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80020d8:	b003      	add	sp, #12
 80020da:	4770      	bx	lr
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <__ssputs_r>:
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	688e      	ldr	r6, [r1, #8]
 80020e6:	429e      	cmp	r6, r3
 80020e8:	4682      	mov	sl, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	4691      	mov	r9, r2
 80020ee:	4698      	mov	r8, r3
 80020f0:	d835      	bhi.n	800215e <__ssputs_r+0x7e>
 80020f2:	898a      	ldrh	r2, [r1, #12]
 80020f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020f8:	d031      	beq.n	800215e <__ssputs_r+0x7e>
 80020fa:	6825      	ldr	r5, [r4, #0]
 80020fc:	6909      	ldr	r1, [r1, #16]
 80020fe:	1a6f      	subs	r7, r5, r1
 8002100:	6965      	ldr	r5, [r4, #20]
 8002102:	2302      	movs	r3, #2
 8002104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002108:	fb95 f5f3 	sdiv	r5, r5, r3
 800210c:	f108 0301 	add.w	r3, r8, #1
 8002110:	443b      	add	r3, r7
 8002112:	429d      	cmp	r5, r3
 8002114:	bf38      	it	cc
 8002116:	461d      	movcc	r5, r3
 8002118:	0553      	lsls	r3, r2, #21
 800211a:	d531      	bpl.n	8002180 <__ssputs_r+0xa0>
 800211c:	4629      	mov	r1, r5
 800211e:	f000 fb39 	bl	8002794 <_malloc_r>
 8002122:	4606      	mov	r6, r0
 8002124:	b950      	cbnz	r0, 800213c <__ssputs_r+0x5c>
 8002126:	230c      	movs	r3, #12
 8002128:	f8ca 3000 	str.w	r3, [sl]
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800213c:	463a      	mov	r2, r7
 800213e:	6921      	ldr	r1, [r4, #16]
 8002140:	f000 fab4 	bl	80026ac <memcpy>
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214e:	81a3      	strh	r3, [r4, #12]
 8002150:	6126      	str	r6, [r4, #16]
 8002152:	6165      	str	r5, [r4, #20]
 8002154:	443e      	add	r6, r7
 8002156:	1bed      	subs	r5, r5, r7
 8002158:	6026      	str	r6, [r4, #0]
 800215a:	60a5      	str	r5, [r4, #8]
 800215c:	4646      	mov	r6, r8
 800215e:	4546      	cmp	r6, r8
 8002160:	bf28      	it	cs
 8002162:	4646      	movcs	r6, r8
 8002164:	4632      	mov	r2, r6
 8002166:	4649      	mov	r1, r9
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	f000 faaa 	bl	80026c2 <memmove>
 800216e:	68a3      	ldr	r3, [r4, #8]
 8002170:	1b9b      	subs	r3, r3, r6
 8002172:	60a3      	str	r3, [r4, #8]
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	441e      	add	r6, r3
 8002178:	6026      	str	r6, [r4, #0]
 800217a:	2000      	movs	r0, #0
 800217c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002180:	462a      	mov	r2, r5
 8002182:	f000 fb65 	bl	8002850 <_realloc_r>
 8002186:	4606      	mov	r6, r0
 8002188:	2800      	cmp	r0, #0
 800218a:	d1e1      	bne.n	8002150 <__ssputs_r+0x70>
 800218c:	6921      	ldr	r1, [r4, #16]
 800218e:	4650      	mov	r0, sl
 8002190:	f000 fab2 	bl	80026f8 <_free_r>
 8002194:	e7c7      	b.n	8002126 <__ssputs_r+0x46>
	...

08002198 <_svfiprintf_r>:
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	b09d      	sub	sp, #116	; 0x74
 800219e:	4680      	mov	r8, r0
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	898b      	ldrh	r3, [r1, #12]
 80021a4:	061c      	lsls	r4, r3, #24
 80021a6:	460d      	mov	r5, r1
 80021a8:	4616      	mov	r6, r2
 80021aa:	d50f      	bpl.n	80021cc <_svfiprintf_r+0x34>
 80021ac:	690b      	ldr	r3, [r1, #16]
 80021ae:	b96b      	cbnz	r3, 80021cc <_svfiprintf_r+0x34>
 80021b0:	2140      	movs	r1, #64	; 0x40
 80021b2:	f000 faef 	bl	8002794 <_malloc_r>
 80021b6:	6028      	str	r0, [r5, #0]
 80021b8:	6128      	str	r0, [r5, #16]
 80021ba:	b928      	cbnz	r0, 80021c8 <_svfiprintf_r+0x30>
 80021bc:	230c      	movs	r3, #12
 80021be:	f8c8 3000 	str.w	r3, [r8]
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	e0c5      	b.n	8002354 <_svfiprintf_r+0x1bc>
 80021c8:	2340      	movs	r3, #64	; 0x40
 80021ca:	616b      	str	r3, [r5, #20]
 80021cc:	2300      	movs	r3, #0
 80021ce:	9309      	str	r3, [sp, #36]	; 0x24
 80021d0:	2320      	movs	r3, #32
 80021d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021d6:	2330      	movs	r3, #48	; 0x30
 80021d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021dc:	f04f 0b01 	mov.w	fp, #1
 80021e0:	4637      	mov	r7, r6
 80021e2:	463c      	mov	r4, r7
 80021e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13c      	bne.n	8002266 <_svfiprintf_r+0xce>
 80021ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80021f0:	d00b      	beq.n	800220a <_svfiprintf_r+0x72>
 80021f2:	4653      	mov	r3, sl
 80021f4:	4632      	mov	r2, r6
 80021f6:	4629      	mov	r1, r5
 80021f8:	4640      	mov	r0, r8
 80021fa:	f7ff ff71 	bl	80020e0 <__ssputs_r>
 80021fe:	3001      	adds	r0, #1
 8002200:	f000 80a3 	beq.w	800234a <_svfiprintf_r+0x1b2>
 8002204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002206:	4453      	add	r3, sl
 8002208:	9309      	str	r3, [sp, #36]	; 0x24
 800220a:	783b      	ldrb	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 809c 	beq.w	800234a <_svfiprintf_r+0x1b2>
 8002212:	2300      	movs	r3, #0
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	9304      	str	r3, [sp, #16]
 800221a:	9307      	str	r3, [sp, #28]
 800221c:	9205      	str	r2, [sp, #20]
 800221e:	9306      	str	r3, [sp, #24]
 8002220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002224:	931a      	str	r3, [sp, #104]	; 0x68
 8002226:	2205      	movs	r2, #5
 8002228:	7821      	ldrb	r1, [r4, #0]
 800222a:	4850      	ldr	r0, [pc, #320]	; (800236c <_svfiprintf_r+0x1d4>)
 800222c:	f7fd ffe0 	bl	80001f0 <memchr>
 8002230:	1c67      	adds	r7, r4, #1
 8002232:	9b04      	ldr	r3, [sp, #16]
 8002234:	b9d8      	cbnz	r0, 800226e <_svfiprintf_r+0xd6>
 8002236:	06d9      	lsls	r1, r3, #27
 8002238:	bf44      	itt	mi
 800223a:	2220      	movmi	r2, #32
 800223c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002240:	071a      	lsls	r2, r3, #28
 8002242:	bf44      	itt	mi
 8002244:	222b      	movmi	r2, #43	; 0x2b
 8002246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800224a:	7822      	ldrb	r2, [r4, #0]
 800224c:	2a2a      	cmp	r2, #42	; 0x2a
 800224e:	d016      	beq.n	800227e <_svfiprintf_r+0xe6>
 8002250:	9a07      	ldr	r2, [sp, #28]
 8002252:	2100      	movs	r1, #0
 8002254:	200a      	movs	r0, #10
 8002256:	4627      	mov	r7, r4
 8002258:	3401      	adds	r4, #1
 800225a:	783b      	ldrb	r3, [r7, #0]
 800225c:	3b30      	subs	r3, #48	; 0x30
 800225e:	2b09      	cmp	r3, #9
 8002260:	d951      	bls.n	8002306 <_svfiprintf_r+0x16e>
 8002262:	b1c9      	cbz	r1, 8002298 <_svfiprintf_r+0x100>
 8002264:	e011      	b.n	800228a <_svfiprintf_r+0xf2>
 8002266:	2b25      	cmp	r3, #37	; 0x25
 8002268:	d0c0      	beq.n	80021ec <_svfiprintf_r+0x54>
 800226a:	4627      	mov	r7, r4
 800226c:	e7b9      	b.n	80021e2 <_svfiprintf_r+0x4a>
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <_svfiprintf_r+0x1d4>)
 8002270:	1a80      	subs	r0, r0, r2
 8002272:	fa0b f000 	lsl.w	r0, fp, r0
 8002276:	4318      	orrs	r0, r3
 8002278:	9004      	str	r0, [sp, #16]
 800227a:	463c      	mov	r4, r7
 800227c:	e7d3      	b.n	8002226 <_svfiprintf_r+0x8e>
 800227e:	9a03      	ldr	r2, [sp, #12]
 8002280:	1d11      	adds	r1, r2, #4
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	9103      	str	r1, [sp, #12]
 8002286:	2a00      	cmp	r2, #0
 8002288:	db01      	blt.n	800228e <_svfiprintf_r+0xf6>
 800228a:	9207      	str	r2, [sp, #28]
 800228c:	e004      	b.n	8002298 <_svfiprintf_r+0x100>
 800228e:	4252      	negs	r2, r2
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	9207      	str	r2, [sp, #28]
 8002296:	9304      	str	r3, [sp, #16]
 8002298:	783b      	ldrb	r3, [r7, #0]
 800229a:	2b2e      	cmp	r3, #46	; 0x2e
 800229c:	d10e      	bne.n	80022bc <_svfiprintf_r+0x124>
 800229e:	787b      	ldrb	r3, [r7, #1]
 80022a0:	2b2a      	cmp	r3, #42	; 0x2a
 80022a2:	f107 0101 	add.w	r1, r7, #1
 80022a6:	d132      	bne.n	800230e <_svfiprintf_r+0x176>
 80022a8:	9b03      	ldr	r3, [sp, #12]
 80022aa:	1d1a      	adds	r2, r3, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	9203      	str	r2, [sp, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bfb8      	it	lt
 80022b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80022b8:	3702      	adds	r7, #2
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	4c2c      	ldr	r4, [pc, #176]	; (8002370 <_svfiprintf_r+0x1d8>)
 80022be:	7839      	ldrb	r1, [r7, #0]
 80022c0:	2203      	movs	r2, #3
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7fd ff94 	bl	80001f0 <memchr>
 80022c8:	b138      	cbz	r0, 80022da <_svfiprintf_r+0x142>
 80022ca:	2340      	movs	r3, #64	; 0x40
 80022cc:	1b00      	subs	r0, r0, r4
 80022ce:	fa03 f000 	lsl.w	r0, r3, r0
 80022d2:	9b04      	ldr	r3, [sp, #16]
 80022d4:	4303      	orrs	r3, r0
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	3701      	adds	r7, #1
 80022da:	7839      	ldrb	r1, [r7, #0]
 80022dc:	4825      	ldr	r0, [pc, #148]	; (8002374 <_svfiprintf_r+0x1dc>)
 80022de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022e2:	2206      	movs	r2, #6
 80022e4:	1c7e      	adds	r6, r7, #1
 80022e6:	f7fd ff83 	bl	80001f0 <memchr>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d035      	beq.n	800235a <_svfiprintf_r+0x1c2>
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <_svfiprintf_r+0x1e0>)
 80022f0:	b9fb      	cbnz	r3, 8002332 <_svfiprintf_r+0x19a>
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	3307      	adds	r3, #7
 80022f6:	f023 0307 	bic.w	r3, r3, #7
 80022fa:	3308      	adds	r3, #8
 80022fc:	9303      	str	r3, [sp, #12]
 80022fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002300:	444b      	add	r3, r9
 8002302:	9309      	str	r3, [sp, #36]	; 0x24
 8002304:	e76c      	b.n	80021e0 <_svfiprintf_r+0x48>
 8002306:	fb00 3202 	mla	r2, r0, r2, r3
 800230a:	2101      	movs	r1, #1
 800230c:	e7a3      	b.n	8002256 <_svfiprintf_r+0xbe>
 800230e:	2300      	movs	r3, #0
 8002310:	9305      	str	r3, [sp, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	240a      	movs	r4, #10
 8002316:	460f      	mov	r7, r1
 8002318:	3101      	adds	r1, #1
 800231a:	783a      	ldrb	r2, [r7, #0]
 800231c:	3a30      	subs	r2, #48	; 0x30
 800231e:	2a09      	cmp	r2, #9
 8002320:	d903      	bls.n	800232a <_svfiprintf_r+0x192>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ca      	beq.n	80022bc <_svfiprintf_r+0x124>
 8002326:	9005      	str	r0, [sp, #20]
 8002328:	e7c8      	b.n	80022bc <_svfiprintf_r+0x124>
 800232a:	fb04 2000 	mla	r0, r4, r0, r2
 800232e:	2301      	movs	r3, #1
 8002330:	e7f1      	b.n	8002316 <_svfiprintf_r+0x17e>
 8002332:	ab03      	add	r3, sp, #12
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	462a      	mov	r2, r5
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <_svfiprintf_r+0x1e4>)
 800233a:	a904      	add	r1, sp, #16
 800233c:	4640      	mov	r0, r8
 800233e:	f3af 8000 	nop.w
 8002342:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002346:	4681      	mov	r9, r0
 8002348:	d1d9      	bne.n	80022fe <_svfiprintf_r+0x166>
 800234a:	89ab      	ldrh	r3, [r5, #12]
 800234c:	065b      	lsls	r3, r3, #25
 800234e:	f53f af38 	bmi.w	80021c2 <_svfiprintf_r+0x2a>
 8002352:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002354:	b01d      	add	sp, #116	; 0x74
 8002356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800235a:	ab03      	add	r3, sp, #12
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	462a      	mov	r2, r5
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <_svfiprintf_r+0x1e4>)
 8002362:	a904      	add	r1, sp, #16
 8002364:	4640      	mov	r0, r8
 8002366:	f000 f881 	bl	800246c <_printf_i>
 800236a:	e7ea      	b.n	8002342 <_svfiprintf_r+0x1aa>
 800236c:	08002ae8 	.word	0x08002ae8
 8002370:	08002aee 	.word	0x08002aee
 8002374:	08002af2 	.word	0x08002af2
 8002378:	00000000 	.word	0x00000000
 800237c:	080020e1 	.word	0x080020e1

08002380 <_printf_common>:
 8002380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002384:	4691      	mov	r9, r2
 8002386:	461f      	mov	r7, r3
 8002388:	688a      	ldr	r2, [r1, #8]
 800238a:	690b      	ldr	r3, [r1, #16]
 800238c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002390:	4293      	cmp	r3, r2
 8002392:	bfb8      	it	lt
 8002394:	4613      	movlt	r3, r2
 8002396:	f8c9 3000 	str.w	r3, [r9]
 800239a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800239e:	4606      	mov	r6, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	b112      	cbz	r2, 80023aa <_printf_common+0x2a>
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8c9 3000 	str.w	r3, [r9]
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	0699      	lsls	r1, r3, #26
 80023ae:	bf42      	ittt	mi
 80023b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023b4:	3302      	addmi	r3, #2
 80023b6:	f8c9 3000 	strmi.w	r3, [r9]
 80023ba:	6825      	ldr	r5, [r4, #0]
 80023bc:	f015 0506 	ands.w	r5, r5, #6
 80023c0:	d107      	bne.n	80023d2 <_printf_common+0x52>
 80023c2:	f104 0a19 	add.w	sl, r4, #25
 80023c6:	68e3      	ldr	r3, [r4, #12]
 80023c8:	f8d9 2000 	ldr.w	r2, [r9]
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	429d      	cmp	r5, r3
 80023d0:	db29      	blt.n	8002426 <_printf_common+0xa6>
 80023d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	3300      	adds	r3, #0
 80023da:	bf18      	it	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	0692      	lsls	r2, r2, #26
 80023e0:	d42e      	bmi.n	8002440 <_printf_common+0xc0>
 80023e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023e6:	4639      	mov	r1, r7
 80023e8:	4630      	mov	r0, r6
 80023ea:	47c0      	blx	r8
 80023ec:	3001      	adds	r0, #1
 80023ee:	d021      	beq.n	8002434 <_printf_common+0xb4>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	68e5      	ldr	r5, [r4, #12]
 80023f4:	f8d9 2000 	ldr.w	r2, [r9]
 80023f8:	f003 0306 	and.w	r3, r3, #6
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	bf08      	it	eq
 8002400:	1aad      	subeq	r5, r5, r2
 8002402:	68a3      	ldr	r3, [r4, #8]
 8002404:	6922      	ldr	r2, [r4, #16]
 8002406:	bf0c      	ite	eq
 8002408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800240c:	2500      	movne	r5, #0
 800240e:	4293      	cmp	r3, r2
 8002410:	bfc4      	itt	gt
 8002412:	1a9b      	subgt	r3, r3, r2
 8002414:	18ed      	addgt	r5, r5, r3
 8002416:	f04f 0900 	mov.w	r9, #0
 800241a:	341a      	adds	r4, #26
 800241c:	454d      	cmp	r5, r9
 800241e:	d11b      	bne.n	8002458 <_printf_common+0xd8>
 8002420:	2000      	movs	r0, #0
 8002422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002426:	2301      	movs	r3, #1
 8002428:	4652      	mov	r2, sl
 800242a:	4639      	mov	r1, r7
 800242c:	4630      	mov	r0, r6
 800242e:	47c0      	blx	r8
 8002430:	3001      	adds	r0, #1
 8002432:	d103      	bne.n	800243c <_printf_common+0xbc>
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800243c:	3501      	adds	r5, #1
 800243e:	e7c2      	b.n	80023c6 <_printf_common+0x46>
 8002440:	18e1      	adds	r1, r4, r3
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	2030      	movs	r0, #48	; 0x30
 8002446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800244a:	4422      	add	r2, r4
 800244c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002454:	3302      	adds	r3, #2
 8002456:	e7c4      	b.n	80023e2 <_printf_common+0x62>
 8002458:	2301      	movs	r3, #1
 800245a:	4622      	mov	r2, r4
 800245c:	4639      	mov	r1, r7
 800245e:	4630      	mov	r0, r6
 8002460:	47c0      	blx	r8
 8002462:	3001      	adds	r0, #1
 8002464:	d0e6      	beq.n	8002434 <_printf_common+0xb4>
 8002466:	f109 0901 	add.w	r9, r9, #1
 800246a:	e7d7      	b.n	800241c <_printf_common+0x9c>

0800246c <_printf_i>:
 800246c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002470:	4617      	mov	r7, r2
 8002472:	7e0a      	ldrb	r2, [r1, #24]
 8002474:	b085      	sub	sp, #20
 8002476:	2a6e      	cmp	r2, #110	; 0x6e
 8002478:	4698      	mov	r8, r3
 800247a:	4606      	mov	r6, r0
 800247c:	460c      	mov	r4, r1
 800247e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002480:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002484:	f000 80bc 	beq.w	8002600 <_printf_i+0x194>
 8002488:	d81a      	bhi.n	80024c0 <_printf_i+0x54>
 800248a:	2a63      	cmp	r2, #99	; 0x63
 800248c:	d02e      	beq.n	80024ec <_printf_i+0x80>
 800248e:	d80a      	bhi.n	80024a6 <_printf_i+0x3a>
 8002490:	2a00      	cmp	r2, #0
 8002492:	f000 80c8 	beq.w	8002626 <_printf_i+0x1ba>
 8002496:	2a58      	cmp	r2, #88	; 0x58
 8002498:	f000 808a 	beq.w	80025b0 <_printf_i+0x144>
 800249c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024a0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80024a4:	e02a      	b.n	80024fc <_printf_i+0x90>
 80024a6:	2a64      	cmp	r2, #100	; 0x64
 80024a8:	d001      	beq.n	80024ae <_printf_i+0x42>
 80024aa:	2a69      	cmp	r2, #105	; 0x69
 80024ac:	d1f6      	bne.n	800249c <_printf_i+0x30>
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80024b6:	d023      	beq.n	8002500 <_printf_i+0x94>
 80024b8:	1d11      	adds	r1, r2, #4
 80024ba:	6019      	str	r1, [r3, #0]
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	e027      	b.n	8002510 <_printf_i+0xa4>
 80024c0:	2a73      	cmp	r2, #115	; 0x73
 80024c2:	f000 80b4 	beq.w	800262e <_printf_i+0x1c2>
 80024c6:	d808      	bhi.n	80024da <_printf_i+0x6e>
 80024c8:	2a6f      	cmp	r2, #111	; 0x6f
 80024ca:	d02a      	beq.n	8002522 <_printf_i+0xb6>
 80024cc:	2a70      	cmp	r2, #112	; 0x70
 80024ce:	d1e5      	bne.n	800249c <_printf_i+0x30>
 80024d0:	680a      	ldr	r2, [r1, #0]
 80024d2:	f042 0220 	orr.w	r2, r2, #32
 80024d6:	600a      	str	r2, [r1, #0]
 80024d8:	e003      	b.n	80024e2 <_printf_i+0x76>
 80024da:	2a75      	cmp	r2, #117	; 0x75
 80024dc:	d021      	beq.n	8002522 <_printf_i+0xb6>
 80024de:	2a78      	cmp	r2, #120	; 0x78
 80024e0:	d1dc      	bne.n	800249c <_printf_i+0x30>
 80024e2:	2278      	movs	r2, #120	; 0x78
 80024e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80024e8:	496e      	ldr	r1, [pc, #440]	; (80026a4 <_printf_i+0x238>)
 80024ea:	e064      	b.n	80025b6 <_printf_i+0x14a>
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80024f2:	1d11      	adds	r1, r2, #4
 80024f4:	6019      	str	r1, [r3, #0]
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0a3      	b.n	8002648 <_printf_i+0x1dc>
 8002500:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002504:	f102 0104 	add.w	r1, r2, #4
 8002508:	6019      	str	r1, [r3, #0]
 800250a:	d0d7      	beq.n	80024bc <_printf_i+0x50>
 800250c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002510:	2b00      	cmp	r3, #0
 8002512:	da03      	bge.n	800251c <_printf_i+0xb0>
 8002514:	222d      	movs	r2, #45	; 0x2d
 8002516:	425b      	negs	r3, r3
 8002518:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800251c:	4962      	ldr	r1, [pc, #392]	; (80026a8 <_printf_i+0x23c>)
 800251e:	220a      	movs	r2, #10
 8002520:	e017      	b.n	8002552 <_printf_i+0xe6>
 8002522:	6820      	ldr	r0, [r4, #0]
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	f010 0f80 	tst.w	r0, #128	; 0x80
 800252a:	d003      	beq.n	8002534 <_printf_i+0xc8>
 800252c:	1d08      	adds	r0, r1, #4
 800252e:	6018      	str	r0, [r3, #0]
 8002530:	680b      	ldr	r3, [r1, #0]
 8002532:	e006      	b.n	8002542 <_printf_i+0xd6>
 8002534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002538:	f101 0004 	add.w	r0, r1, #4
 800253c:	6018      	str	r0, [r3, #0]
 800253e:	d0f7      	beq.n	8002530 <_printf_i+0xc4>
 8002540:	880b      	ldrh	r3, [r1, #0]
 8002542:	4959      	ldr	r1, [pc, #356]	; (80026a8 <_printf_i+0x23c>)
 8002544:	2a6f      	cmp	r2, #111	; 0x6f
 8002546:	bf14      	ite	ne
 8002548:	220a      	movne	r2, #10
 800254a:	2208      	moveq	r2, #8
 800254c:	2000      	movs	r0, #0
 800254e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002552:	6865      	ldr	r5, [r4, #4]
 8002554:	60a5      	str	r5, [r4, #8]
 8002556:	2d00      	cmp	r5, #0
 8002558:	f2c0 809c 	blt.w	8002694 <_printf_i+0x228>
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	f020 0004 	bic.w	r0, r0, #4
 8002562:	6020      	str	r0, [r4, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13f      	bne.n	80025e8 <_printf_i+0x17c>
 8002568:	2d00      	cmp	r5, #0
 800256a:	f040 8095 	bne.w	8002698 <_printf_i+0x22c>
 800256e:	4675      	mov	r5, lr
 8002570:	2a08      	cmp	r2, #8
 8002572:	d10b      	bne.n	800258c <_printf_i+0x120>
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	07da      	lsls	r2, r3, #31
 8002578:	d508      	bpl.n	800258c <_printf_i+0x120>
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	6862      	ldr	r2, [r4, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	bfde      	ittt	le
 8002582:	2330      	movle	r3, #48	; 0x30
 8002584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800258c:	ebae 0305 	sub.w	r3, lr, r5
 8002590:	6123      	str	r3, [r4, #16]
 8002592:	f8cd 8000 	str.w	r8, [sp]
 8002596:	463b      	mov	r3, r7
 8002598:	aa03      	add	r2, sp, #12
 800259a:	4621      	mov	r1, r4
 800259c:	4630      	mov	r0, r6
 800259e:	f7ff feef 	bl	8002380 <_printf_common>
 80025a2:	3001      	adds	r0, #1
 80025a4:	d155      	bne.n	8002652 <_printf_i+0x1e6>
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	b005      	add	sp, #20
 80025ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80025b4:	493c      	ldr	r1, [pc, #240]	; (80026a8 <_printf_i+0x23c>)
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025be:	f100 0504 	add.w	r5, r0, #4
 80025c2:	601d      	str	r5, [r3, #0]
 80025c4:	d001      	beq.n	80025ca <_printf_i+0x15e>
 80025c6:	6803      	ldr	r3, [r0, #0]
 80025c8:	e002      	b.n	80025d0 <_printf_i+0x164>
 80025ca:	0655      	lsls	r5, r2, #25
 80025cc:	d5fb      	bpl.n	80025c6 <_printf_i+0x15a>
 80025ce:	8803      	ldrh	r3, [r0, #0]
 80025d0:	07d0      	lsls	r0, r2, #31
 80025d2:	bf44      	itt	mi
 80025d4:	f042 0220 	orrmi.w	r2, r2, #32
 80025d8:	6022      	strmi	r2, [r4, #0]
 80025da:	b91b      	cbnz	r3, 80025e4 <_printf_i+0x178>
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	f022 0220 	bic.w	r2, r2, #32
 80025e2:	6022      	str	r2, [r4, #0]
 80025e4:	2210      	movs	r2, #16
 80025e6:	e7b1      	b.n	800254c <_printf_i+0xe0>
 80025e8:	4675      	mov	r5, lr
 80025ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80025ee:	fb02 3310 	mls	r3, r2, r0, r3
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025f8:	4603      	mov	r3, r0
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d1f5      	bne.n	80025ea <_printf_i+0x17e>
 80025fe:	e7b7      	b.n	8002570 <_printf_i+0x104>
 8002600:	6808      	ldr	r0, [r1, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	6949      	ldr	r1, [r1, #20]
 8002606:	f010 0f80 	tst.w	r0, #128	; 0x80
 800260a:	d004      	beq.n	8002616 <_printf_i+0x1aa>
 800260c:	1d10      	adds	r0, r2, #4
 800260e:	6018      	str	r0, [r3, #0]
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	6019      	str	r1, [r3, #0]
 8002614:	e007      	b.n	8002626 <_printf_i+0x1ba>
 8002616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800261a:	f102 0004 	add.w	r0, r2, #4
 800261e:	6018      	str	r0, [r3, #0]
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	d0f6      	beq.n	8002612 <_printf_i+0x1a6>
 8002624:	8019      	strh	r1, [r3, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	6123      	str	r3, [r4, #16]
 800262a:	4675      	mov	r5, lr
 800262c:	e7b1      	b.n	8002592 <_printf_i+0x126>
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	1d11      	adds	r1, r2, #4
 8002632:	6019      	str	r1, [r3, #0]
 8002634:	6815      	ldr	r5, [r2, #0]
 8002636:	6862      	ldr	r2, [r4, #4]
 8002638:	2100      	movs	r1, #0
 800263a:	4628      	mov	r0, r5
 800263c:	f7fd fdd8 	bl	80001f0 <memchr>
 8002640:	b108      	cbz	r0, 8002646 <_printf_i+0x1da>
 8002642:	1b40      	subs	r0, r0, r5
 8002644:	6060      	str	r0, [r4, #4]
 8002646:	6863      	ldr	r3, [r4, #4]
 8002648:	6123      	str	r3, [r4, #16]
 800264a:	2300      	movs	r3, #0
 800264c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002650:	e79f      	b.n	8002592 <_printf_i+0x126>
 8002652:	6923      	ldr	r3, [r4, #16]
 8002654:	462a      	mov	r2, r5
 8002656:	4639      	mov	r1, r7
 8002658:	4630      	mov	r0, r6
 800265a:	47c0      	blx	r8
 800265c:	3001      	adds	r0, #1
 800265e:	d0a2      	beq.n	80025a6 <_printf_i+0x13a>
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	079b      	lsls	r3, r3, #30
 8002664:	d507      	bpl.n	8002676 <_printf_i+0x20a>
 8002666:	2500      	movs	r5, #0
 8002668:	f104 0919 	add.w	r9, r4, #25
 800266c:	68e3      	ldr	r3, [r4, #12]
 800266e:	9a03      	ldr	r2, [sp, #12]
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	429d      	cmp	r5, r3
 8002674:	db05      	blt.n	8002682 <_printf_i+0x216>
 8002676:	68e0      	ldr	r0, [r4, #12]
 8002678:	9b03      	ldr	r3, [sp, #12]
 800267a:	4298      	cmp	r0, r3
 800267c:	bfb8      	it	lt
 800267e:	4618      	movlt	r0, r3
 8002680:	e793      	b.n	80025aa <_printf_i+0x13e>
 8002682:	2301      	movs	r3, #1
 8002684:	464a      	mov	r2, r9
 8002686:	4639      	mov	r1, r7
 8002688:	4630      	mov	r0, r6
 800268a:	47c0      	blx	r8
 800268c:	3001      	adds	r0, #1
 800268e:	d08a      	beq.n	80025a6 <_printf_i+0x13a>
 8002690:	3501      	adds	r5, #1
 8002692:	e7eb      	b.n	800266c <_printf_i+0x200>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1a7      	bne.n	80025e8 <_printf_i+0x17c>
 8002698:	780b      	ldrb	r3, [r1, #0]
 800269a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800269e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026a2:	e765      	b.n	8002570 <_printf_i+0x104>
 80026a4:	08002b0a 	.word	0x08002b0a
 80026a8:	08002af9 	.word	0x08002af9

080026ac <memcpy>:
 80026ac:	b510      	push	{r4, lr}
 80026ae:	1e43      	subs	r3, r0, #1
 80026b0:	440a      	add	r2, r1
 80026b2:	4291      	cmp	r1, r2
 80026b4:	d100      	bne.n	80026b8 <memcpy+0xc>
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c0:	e7f7      	b.n	80026b2 <memcpy+0x6>

080026c2 <memmove>:
 80026c2:	4288      	cmp	r0, r1
 80026c4:	b510      	push	{r4, lr}
 80026c6:	eb01 0302 	add.w	r3, r1, r2
 80026ca:	d803      	bhi.n	80026d4 <memmove+0x12>
 80026cc:	1e42      	subs	r2, r0, #1
 80026ce:	4299      	cmp	r1, r3
 80026d0:	d10c      	bne.n	80026ec <memmove+0x2a>
 80026d2:	bd10      	pop	{r4, pc}
 80026d4:	4298      	cmp	r0, r3
 80026d6:	d2f9      	bcs.n	80026cc <memmove+0xa>
 80026d8:	1881      	adds	r1, r0, r2
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	42d3      	cmn	r3, r2
 80026de:	d100      	bne.n	80026e2 <memmove+0x20>
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026ea:	e7f7      	b.n	80026dc <memmove+0x1a>
 80026ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026f4:	e7eb      	b.n	80026ce <memmove+0xc>
	...

080026f8 <_free_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4605      	mov	r5, r0
 80026fc:	2900      	cmp	r1, #0
 80026fe:	d045      	beq.n	800278c <_free_r+0x94>
 8002700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002704:	1f0c      	subs	r4, r1, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfb8      	it	lt
 800270a:	18e4      	addlt	r4, r4, r3
 800270c:	f000 f8d6 	bl	80028bc <__malloc_lock>
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <_free_r+0x98>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	4610      	mov	r0, r2
 8002716:	b933      	cbnz	r3, 8002726 <_free_r+0x2e>
 8002718:	6063      	str	r3, [r4, #4]
 800271a:	6014      	str	r4, [r2, #0]
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002722:	f000 b8cc 	b.w	80028be <__malloc_unlock>
 8002726:	42a3      	cmp	r3, r4
 8002728:	d90c      	bls.n	8002744 <_free_r+0x4c>
 800272a:	6821      	ldr	r1, [r4, #0]
 800272c:	1862      	adds	r2, r4, r1
 800272e:	4293      	cmp	r3, r2
 8002730:	bf04      	itt	eq
 8002732:	681a      	ldreq	r2, [r3, #0]
 8002734:	685b      	ldreq	r3, [r3, #4]
 8002736:	6063      	str	r3, [r4, #4]
 8002738:	bf04      	itt	eq
 800273a:	1852      	addeq	r2, r2, r1
 800273c:	6022      	streq	r2, [r4, #0]
 800273e:	6004      	str	r4, [r0, #0]
 8002740:	e7ec      	b.n	800271c <_free_r+0x24>
 8002742:	4613      	mov	r3, r2
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	b10a      	cbz	r2, 800274c <_free_r+0x54>
 8002748:	42a2      	cmp	r2, r4
 800274a:	d9fa      	bls.n	8002742 <_free_r+0x4a>
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	1858      	adds	r0, r3, r1
 8002750:	42a0      	cmp	r0, r4
 8002752:	d10b      	bne.n	800276c <_free_r+0x74>
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	4401      	add	r1, r0
 8002758:	1858      	adds	r0, r3, r1
 800275a:	4282      	cmp	r2, r0
 800275c:	6019      	str	r1, [r3, #0]
 800275e:	d1dd      	bne.n	800271c <_free_r+0x24>
 8002760:	6810      	ldr	r0, [r2, #0]
 8002762:	6852      	ldr	r2, [r2, #4]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	4401      	add	r1, r0
 8002768:	6019      	str	r1, [r3, #0]
 800276a:	e7d7      	b.n	800271c <_free_r+0x24>
 800276c:	d902      	bls.n	8002774 <_free_r+0x7c>
 800276e:	230c      	movs	r3, #12
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	e7d3      	b.n	800271c <_free_r+0x24>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	1821      	adds	r1, r4, r0
 8002778:	428a      	cmp	r2, r1
 800277a:	bf04      	itt	eq
 800277c:	6811      	ldreq	r1, [r2, #0]
 800277e:	6852      	ldreq	r2, [r2, #4]
 8002780:	6062      	str	r2, [r4, #4]
 8002782:	bf04      	itt	eq
 8002784:	1809      	addeq	r1, r1, r0
 8002786:	6021      	streq	r1, [r4, #0]
 8002788:	605c      	str	r4, [r3, #4]
 800278a:	e7c7      	b.n	800271c <_free_r+0x24>
 800278c:	bd38      	pop	{r3, r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	20000094 	.word	0x20000094

08002794 <_malloc_r>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	1ccd      	adds	r5, r1, #3
 8002798:	f025 0503 	bic.w	r5, r5, #3
 800279c:	3508      	adds	r5, #8
 800279e:	2d0c      	cmp	r5, #12
 80027a0:	bf38      	it	cc
 80027a2:	250c      	movcc	r5, #12
 80027a4:	2d00      	cmp	r5, #0
 80027a6:	4606      	mov	r6, r0
 80027a8:	db01      	blt.n	80027ae <_malloc_r+0x1a>
 80027aa:	42a9      	cmp	r1, r5
 80027ac:	d903      	bls.n	80027b6 <_malloc_r+0x22>
 80027ae:	230c      	movs	r3, #12
 80027b0:	6033      	str	r3, [r6, #0]
 80027b2:	2000      	movs	r0, #0
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	f000 f881 	bl	80028bc <__malloc_lock>
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <_malloc_r+0xb4>)
 80027bc:	6814      	ldr	r4, [r2, #0]
 80027be:	4621      	mov	r1, r4
 80027c0:	b991      	cbnz	r1, 80027e8 <_malloc_r+0x54>
 80027c2:	4c22      	ldr	r4, [pc, #136]	; (800284c <_malloc_r+0xb8>)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	b91b      	cbnz	r3, 80027d0 <_malloc_r+0x3c>
 80027c8:	4630      	mov	r0, r6
 80027ca:	f000 f867 	bl	800289c <_sbrk_r>
 80027ce:	6020      	str	r0, [r4, #0]
 80027d0:	4629      	mov	r1, r5
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 f862 	bl	800289c <_sbrk_r>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d126      	bne.n	800282a <_malloc_r+0x96>
 80027dc:	230c      	movs	r3, #12
 80027de:	6033      	str	r3, [r6, #0]
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 f86c 	bl	80028be <__malloc_unlock>
 80027e6:	e7e4      	b.n	80027b2 <_malloc_r+0x1e>
 80027e8:	680b      	ldr	r3, [r1, #0]
 80027ea:	1b5b      	subs	r3, r3, r5
 80027ec:	d41a      	bmi.n	8002824 <_malloc_r+0x90>
 80027ee:	2b0b      	cmp	r3, #11
 80027f0:	d90f      	bls.n	8002812 <_malloc_r+0x7e>
 80027f2:	600b      	str	r3, [r1, #0]
 80027f4:	50cd      	str	r5, [r1, r3]
 80027f6:	18cc      	adds	r4, r1, r3
 80027f8:	4630      	mov	r0, r6
 80027fa:	f000 f860 	bl	80028be <__malloc_unlock>
 80027fe:	f104 000b 	add.w	r0, r4, #11
 8002802:	1d23      	adds	r3, r4, #4
 8002804:	f020 0007 	bic.w	r0, r0, #7
 8002808:	1ac3      	subs	r3, r0, r3
 800280a:	d01b      	beq.n	8002844 <_malloc_r+0xb0>
 800280c:	425a      	negs	r2, r3
 800280e:	50e2      	str	r2, [r4, r3]
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	428c      	cmp	r4, r1
 8002814:	bf0d      	iteet	eq
 8002816:	6863      	ldreq	r3, [r4, #4]
 8002818:	684b      	ldrne	r3, [r1, #4]
 800281a:	6063      	strne	r3, [r4, #4]
 800281c:	6013      	streq	r3, [r2, #0]
 800281e:	bf18      	it	ne
 8002820:	460c      	movne	r4, r1
 8002822:	e7e9      	b.n	80027f8 <_malloc_r+0x64>
 8002824:	460c      	mov	r4, r1
 8002826:	6849      	ldr	r1, [r1, #4]
 8002828:	e7ca      	b.n	80027c0 <_malloc_r+0x2c>
 800282a:	1cc4      	adds	r4, r0, #3
 800282c:	f024 0403 	bic.w	r4, r4, #3
 8002830:	42a0      	cmp	r0, r4
 8002832:	d005      	beq.n	8002840 <_malloc_r+0xac>
 8002834:	1a21      	subs	r1, r4, r0
 8002836:	4630      	mov	r0, r6
 8002838:	f000 f830 	bl	800289c <_sbrk_r>
 800283c:	3001      	adds	r0, #1
 800283e:	d0cd      	beq.n	80027dc <_malloc_r+0x48>
 8002840:	6025      	str	r5, [r4, #0]
 8002842:	e7d9      	b.n	80027f8 <_malloc_r+0x64>
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	bf00      	nop
 8002848:	20000094 	.word	0x20000094
 800284c:	20000098 	.word	0x20000098

08002850 <_realloc_r>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4607      	mov	r7, r0
 8002854:	4614      	mov	r4, r2
 8002856:	460e      	mov	r6, r1
 8002858:	b921      	cbnz	r1, 8002864 <_realloc_r+0x14>
 800285a:	4611      	mov	r1, r2
 800285c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002860:	f7ff bf98 	b.w	8002794 <_malloc_r>
 8002864:	b922      	cbnz	r2, 8002870 <_realloc_r+0x20>
 8002866:	f7ff ff47 	bl	80026f8 <_free_r>
 800286a:	4625      	mov	r5, r4
 800286c:	4628      	mov	r0, r5
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002870:	f000 f826 	bl	80028c0 <_malloc_usable_size_r>
 8002874:	4284      	cmp	r4, r0
 8002876:	d90f      	bls.n	8002898 <_realloc_r+0x48>
 8002878:	4621      	mov	r1, r4
 800287a:	4638      	mov	r0, r7
 800287c:	f7ff ff8a 	bl	8002794 <_malloc_r>
 8002880:	4605      	mov	r5, r0
 8002882:	2800      	cmp	r0, #0
 8002884:	d0f2      	beq.n	800286c <_realloc_r+0x1c>
 8002886:	4631      	mov	r1, r6
 8002888:	4622      	mov	r2, r4
 800288a:	f7ff ff0f 	bl	80026ac <memcpy>
 800288e:	4631      	mov	r1, r6
 8002890:	4638      	mov	r0, r7
 8002892:	f7ff ff31 	bl	80026f8 <_free_r>
 8002896:	e7e9      	b.n	800286c <_realloc_r+0x1c>
 8002898:	4635      	mov	r5, r6
 800289a:	e7e7      	b.n	800286c <_realloc_r+0x1c>

0800289c <_sbrk_r>:
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	4c06      	ldr	r4, [pc, #24]	; (80028b8 <_sbrk_r+0x1c>)
 80028a0:	2300      	movs	r3, #0
 80028a2:	4605      	mov	r5, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	6023      	str	r3, [r4, #0]
 80028a8:	f7ff fb6e 	bl	8001f88 <_sbrk>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_sbrk_r+0x1a>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_sbrk_r+0x1a>
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	20000208 	.word	0x20000208

080028bc <__malloc_lock>:
 80028bc:	4770      	bx	lr

080028be <__malloc_unlock>:
 80028be:	4770      	bx	lr

080028c0 <_malloc_usable_size_r>:
 80028c0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80028c4:	2800      	cmp	r0, #0
 80028c6:	f1a0 0004 	sub.w	r0, r0, #4
 80028ca:	bfbc      	itt	lt
 80028cc:	580b      	ldrlt	r3, [r1, r0]
 80028ce:	18c0      	addlt	r0, r0, r3
 80028d0:	4770      	bx	lr
	...

080028d4 <_init>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr

080028e0 <_fini>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr
